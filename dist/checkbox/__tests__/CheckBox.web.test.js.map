{"version":3,"sources":["../../../src/checkbox/__tests__/CheckBox.web.test.js"],"names":["props","noProps","component","enzyme","tests","shallow","snapshot","styleguidist","checked","title","onIconPress","x","getJsxString","iconRight","script","right","center","containerStyle","backgroundColor","textStyle","onLongPress","y","onPress","checkedIcon","uncheckedIcon","checkedColor","uncheckedColor","checkedTitle","fontFamily","samples","Input","sectionComponents","CheckBox","describe","it","expect","length","toBe","toMatchSnapshot","find","View","jest","fn","children"],"mappings":"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","file":"CheckBox.web.test.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Text,\r\n  TouchableHighlight,\r\n  TouchableWithoutFeedback,\r\n  View,\r\n} from 'react-native';\r\nimport { shallow } from 'enzyme';\r\nimport toJson from 'enzyme-to-json';\r\nimport parseSamples, {\r\n  assignRef,\r\n  genRefId,\r\n} from 'enzyme-styleguidist-sample-parser';\r\nimport options, {\r\n  snapShot,\r\n  buildJsxForGuideMethod,\r\n  ensureCalled,\r\n  onlyEnsureCalled,\r\n  onlySnapshots,\r\n} from '../../../samples';\r\nimport CheckBox from '../CheckBox';\r\n\r\nconst props = {\r\n  noProps: {\r\n    component: CheckBox,\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  'component, title, checked, & onIconPress': {\r\n    component: CheckBox,\r\n    props: {\r\n      component: TouchableWithoutFeedback,\r\n      checked: true,\r\n      title: 'Title',\r\n      onIconPress: () => {\r\n        let x = 7;\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      getJsxString: () => {\r\n        return `const TouchableWithoutFeedback = RN.TouchableWithoutFeedback;\r\n  <CheckBox \r\n    component={TouchableWithoutFeedback}\r\n    title=\"title\"\r\n    checked={state.checked}\r\n    onIconPress={() => {\r\n      setState({ checked: !state.checked });\r\n    }}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n  'iconRight, title, checked, & onIconPress': {\r\n    component: CheckBox,\r\n    props: {\r\n      iconRight: true,\r\n      title: 'Title',\r\n      checked: true,\r\n      onIconPress: () => {\r\n        let x = 7;\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      script: `initialState = { checked: false };`,\r\n      getJsxString: () => {\r\n        return `<CheckBox\r\n    iconRight\r\n    title=\"title\"\r\n    checked={state.checked}\r\n    onIconPress={() => {\r\n      setState({ checked: !state.checked });\r\n    }}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n  'right, title, checked, & onIconPress': {\r\n    component: CheckBox,\r\n    props: {\r\n      right: true,\r\n      title: 'Title',\r\n      checked: true,\r\n      onIconPress: () => {\r\n        let x = 7;\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      script: `initialState = { checked: false };`,\r\n      getJsxString: () => {\r\n        return `<CheckBox\r\n  right\r\n  title=\"title\"\r\n  checked={state.checked}\r\n  onIconPress={() => {\r\n    setState({ checked: !state.checked });\r\n  }}\r\n/>`;\r\n      },\r\n    },\r\n  },\r\n  'center, title, checked, & onIconPress': {\r\n    component: CheckBox,\r\n    props: {\r\n      center: true,\r\n      title: 'Title',\r\n      checked: true,\r\n      onIconPress: () => {\r\n        let x = 7;\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      script: `initialState = { checked: false };`,\r\n      getJsxString: () => {\r\n        return `<CheckBox\r\n    center\r\n    title=\"title\"\r\n    checked={state.checked}\r\n    onIconPress={() => {\r\n      setState({ checked: !state.checked });\r\n    }}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n  containerStyle: {\r\n    component: CheckBox,\r\n    props: { containerStyle: { backgroundColor: '#071' } },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  'textStyle & title': {\r\n    component: CheckBox,\r\n    props: { textStyle: { backgroundColor: '#071' }, title: 'Title' },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  'onLongPress, title, checked, & onIconPress': {\r\n    component: CheckBox,\r\n    props: {\r\n      title: 'Title',\r\n      checked: true,\r\n      onIconPress: () => {\r\n        let x = 7;\r\n      },\r\n      onLongPress: () => {\r\n        let y = 8;\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      script: `initialState = { checked: false };`,\r\n      getJsxString: () => {\r\n        return `<CheckBox\r\n    title=\"title\"\r\n    checked={state.checked}\r\n    onIconPress={() => {\r\n      setState({ checked: !state.checked });\r\n    }}\r\n    onLongPress={() => {\r\n      console.log(\"pressed, long\");\r\n    }}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n  'onLongIconPress, title, checked, & onIconPress': {\r\n    component: CheckBox,\r\n    props: {\r\n      title: 'Title',\r\n      checked: true,\r\n      onIconPress: () => {\r\n        let x = 7;\r\n      },\r\n      onLongPress: () => {\r\n        let y = 8;\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      script: `initialState = { checked: false };`,\r\n      getJsxString: () => {\r\n        return `<CheckBox\r\n    title=\"title\"\r\n    checked={state.checked}\r\n    onIconPress={() => {\r\n      setState({ checked: !state.checked });\r\n    }}\r\n    onLongIconPress={() => {\r\n      console.log(\"pressed, long\");\r\n    }}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n  'onPress, title, checked, & onIconPress': {\r\n    component: CheckBox,\r\n    props: {\r\n      title: 'Title',\r\n      checked: true,\r\n      onIconPress: () => {\r\n        let x = 7;\r\n      },\r\n      onPress: () => {\r\n        let y = 8;\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      script: `initialState = { checked: false };`,\r\n      getJsxString: () => {\r\n        return `<CheckBox\r\n    title=\"title\"\r\n    checked={state.checked}\r\n    onIconPress={() => {\r\n      setState({ checked: !state.checked });\r\n    }}\r\n    onPress={() => {\r\n      setState({ checked: !state.checked });\r\n    }}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n  checkedIcon: {\r\n    component: CheckBox,\r\n    props: { checked: true, checkedIcon: 'bell-o' },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  uncheckedIcon: {\r\n    component: CheckBox,\r\n    props: { uncheckedIcon: 'bell-slash-o' },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  checkedColor: {\r\n    component: CheckBox,\r\n    props: { checked: true, checkedColor: '#22d' },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  uncheckedColor: {\r\n    component: CheckBox,\r\n    props: { uncheckedColor: '#d22' },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  'checkedTitle, title, checked, & onIconPress': {\r\n    component: CheckBox,\r\n    props: {\r\n      checkedTitle: 'title - is checked',\r\n      title: 'Title',\r\n      checked: true,\r\n      onIconPress: () => {\r\n        let x = 7;\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      script: `initialState = { checked: false };`,\r\n      getJsxString: () => {\r\n        return `<CheckBox\r\n    checkedTitle=\"title - is checked\"\r\n    title=\"title\"\r\n    checked={state.checked}\r\n    onIconPress={() => {\r\n      setState({ checked: !state.checked });\r\n    }}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n  fontFamily: {\r\n    component: CheckBox,\r\n    props: { title: 'Title', fontFamily: 'Courier New' },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n};\r\n\r\nconst samples = {\r\n  props,\r\n};\r\n\r\nparseSamples(\r\n  {\r\n    Input: { sectionComponents: { CheckBox: { samples } } },\r\n  },\r\n  options\r\n);\r\n\r\ndescribe('CheckBox Component', () => {\r\n  it('should render without issues', () => {\r\n    const component = shallow(<CheckBox />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should use TouchableOpacity as default component', () => {\r\n    const component = shallow(<CheckBox />);\r\n\r\n    expect(component.find('TouchableOpacity').length).toBe(1);\r\n  });\r\n\r\n  it('should allow to pass custom component', () => {\r\n    const View = jest.fn();\r\n    const component = shallow(<CheckBox component={View} />);\r\n\r\n    expect(component.find('View').length).toBe(1);\r\n  });\r\n\r\n  it('should render title in Text', () => {\r\n    const component = shallow(<CheckBox title=\"Custom Text\" checked />);\r\n\r\n    expect(component.props().children.props.children[1].props.children).toBe(\r\n      'Custom Text'\r\n    );\r\n  });\r\n\r\n  it('should render with icon and checked', () => {\r\n    const component = shallow(\r\n      <CheckBox\r\n        iconType=\"font-awesome\"\r\n        checkedColor=\"red\"\r\n        containerStyle={{ backgroundColor: 'red' }}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render with icon and iconRight', () => {\r\n    const component = shallow(\r\n      <CheckBox\r\n        iconType=\"font-awesome\"\r\n        iconRight\r\n        uncheckedColor=\"blue\"\r\n        rigth\r\n        center\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n});\r\n"]}