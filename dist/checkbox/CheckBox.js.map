{"version":3,"sources":["../../src/checkbox/CheckBox.js"],"names":["CheckBox","component","props","checked","iconRight","title","center","right","containerStyle","textStyle","onPress","onLongPress","onIconPress","onLongIconPress","size","checkedIcon","uncheckedIcon","iconType","checkedColor","uncheckedColor","checkedTitle","fontFamily","attributes","Icon","Component","iconName","styles","container","containerHasTitle","wrapper","justifyContent","minWidth","isValidElement","text","defaultProps","primary","propTypes","any","bool","oneOfType","string","element","style","func","number","create","flexDirection","alignItems","margin","marginLeft","marginRight","padding","borderWidth","borderRadius","backgroundColor","borderColor","color","grey1","select","ios","fontWeight","android","bold","web"],"mappings":"yRAAA,qC;AACA,4B;AACA;;;;;;;AAOA,kC;AACA,sC;AACA,wC;AACA,kE;AACA,mD;AACA,sD;;AAEA,GAAMA,UAAW,QAAXA,SAAW,OAAS;;AAEtBC,SAFsB;;;;;;;;;;;;;;;;;;;;;AAuBpBC,KAvBoB,CAEtBD,SAFsB,CAGtBE,OAHsB,CAuBpBD,KAvBoB,CAGtBC,OAHsB,CAItBC,SAJsB,CAuBpBF,KAvBoB,CAItBE,SAJsB,CAKtBC,KALsB,CAuBpBH,KAvBoB,CAKtBG,KALsB,CAMtBC,MANsB,CAuBpBJ,KAvBoB,CAMtBI,MANsB,CAOtBC,KAPsB,CAuBpBL,KAvBoB,CAOtBK,KAPsB,CAQtBC,cARsB,CAuBpBN,KAvBoB,CAQtBM,cARsB,CAStBC,SATsB,CAuBpBP,KAvBoB,CAStBO,SATsB,CAUtBC,OAVsB,CAuBpBR,KAvBoB,CAUtBQ,OAVsB,CAWtBC,WAXsB,CAuBpBT,KAvBoB,CAWtBS,WAXsB,CAYtBC,WAZsB,CAuBpBV,KAvBoB,CAYtBU,WAZsB,CAatBC,eAbsB,CAuBpBX,KAvBoB,CAatBW,eAbsB,CActBC,IAdsB,CAuBpBZ,KAvBoB,CActBY,IAdsB,CAetBC,WAfsB,CAuBpBb,KAvBoB,CAetBa,WAfsB,CAgBtBC,aAhBsB,CAuBpBd,KAvBoB,CAgBtBc,aAhBsB,CAiBtBC,QAjBsB,CAuBpBf,KAvBoB,CAiBtBe,QAjBsB,CAkBtBC,YAlBsB,CAuBpBhB,KAvBoB,CAkBtBgB,YAlBsB,CAmBtBC,cAnBsB,CAuBpBjB,KAvBoB,CAmBtBiB,cAnBsB,CAoBtBC,YApBsB,CAuBpBlB,KAvBoB,CAoBtBkB,YApBsB,CAqBtBC,UArBsB,CAuBpBnB,KAvBoB,CAqBtBmB,UArBsB,CAsBnBC,UAtBmB,0BAuBpBpB,KAvBoB;;AAyBxB,GAAIqB,2BAAJ;AACA,GAAIN,QAAJ,CAAc;AACZM,KAAO,0BAAYN,QAAZ,CAAP;AACD;AACD,GAAMO,WAAYvB,wCAAlB;AACA,GAAIwB,UAAWT,aAAf;AACA,GAAIb,OAAJ,CAAa;AACXsB,SAAWV,WAAX;AACD;AACD;AACE,8BAAC,SAAD;AACMO,UADN;AAEE,YAAaX,WAFf;AAGE,QAASD,OAHX;AAIE,MAAO;AACLgB,OAAOC,SADF;AAELtB,OAASqB,OAAOE,iBAFX;AAGLpB,gBAAkBA,cAHb,CAJT;;;AAUE;AACE,MAAO;AACLkB,OAAOG,OADF;AAELtB,OAAS,CAAEuB,eAAgB,UAAlB,CAFJ;AAGLxB,QAAU,CAAEwB,eAAgB,QAAlB,CAHL,CADT;;;AAOG,CAAC1B,SAAD;AACC,8BAAC,IAAD;AACE,MAAOD,QAAUe,YAAV,CAAyBC,cADlC;AAEE,KAAMM,QAFR;AAGE,KAAMX,MAAQ,EAHhB;AAIE,MAAO,CAAEiB,SAAUjB,MAAQ,EAApB,CAJT;AAKE,YAAaD,eALf;AAME,QAASD,WANX,EARJ;;;;AAkBG,gBAAMoB,cAAN,CAAqB3B,KAArB;AACGA,KADH;AAEGA;AACE;AACE,MAAO;AACLqB,OAAOO,IADF;AAELxB,WAAaA,SAFR;AAGLY,YAAc,CAAEA,qBAAF,CAHT,CADT;;;AAOGlB,QAAUiB,cAAgBf,KAA1B,CAAkCA,KAPrC,CArBR;;;;AAgCGD;AACC,8BAAC,IAAD;AACE,MAAOD,QAAUe,YAAV,CAAyBC,cADlC;AAEE,KAAMM,QAFR;AAGE,KAAMX,MAAQ,EAHhB;AAIE,MAAO,CAAEiB,SAAUjB,MAAQ,EAApB,CAJT;AAKE,YAAaD,eALf;AAME,QAASD,WANX,EAjCJ,CAVF,CADF;;;;;;AAwDD,CA1FD;;AA4FAZ,SAASkC,YAAT,CAAwB;AACtB/B,QAAS,KADa;AAEtBC,UAAW,KAFW;AAGtBG,MAAO,KAHe;AAItBD,OAAQ,KAJc;AAKtBY,aAAc,iBAAOiB,OALC;AAMtBhB,eAAgB,SANM;AAOtBJ,YAAa,gBAPS;AAQtBC,cAAe,UARO;AAStBF,KAAM,EATgB,CAAxB;;;AAYAd,SAASoC,SAAT,CAAqB;AACnBnC,UAAW,oBAAUoC,GADF;AAEnBlC,QAAS,oBAAUmC,IAFA;AAGnBlC,UAAW,oBAAUkC,IAHF;AAInBjC,MAAO,oBAAUkC,SAAV,CAAoB,CAAC,oBAAUC,MAAX,CAAmB,oBAAUC,OAA7B,CAApB,CAJY;AAKnBnC,OAAQ,oBAAUgC,IALC;AAMnB/B,MAAO,oBAAU+B,IANE;AAOnB9B,eAAgB,wBAAckC,KAPX;AAQnBjC,UAAW,kBAAW2B,SAAX,CAAqBM,KARb;AASnBhC,QAAS,oBAAUiC,IATA;AAUnBhC,YAAa,oBAAUgC,IAVJ;AAWnB5B,YAAa,oBAAUyB,MAXJ;AAYnBxB,cAAe,oBAAUwB,MAZN;AAanBvB,SAAU,oBAAUuB,MAbD;AAcnB1B,KAAM,oBAAU8B,MAdG;AAenB1B,aAAc,oBAAUsB,MAfL;AAgBnBrB,eAAgB,oBAAUqB,MAhBP;AAiBnBpB,aAAc,oBAAUoB,MAjBL;AAkBnB5B,YAAa,oBAAU+B,IAlBJ;AAmBnB9B,gBAAiB,oBAAU8B,IAnBR;AAoBnBtB,WAAY,oBAAUmB,MApBH,CAArB;;;AAuBA,GAAMd,QAAS,wBAAWmB,MAAX,CAAkB;AAC/BhB,QAAS;AACPiB,cAAe,KADR;AAEPC,WAAY,QAFL,CADsB;;AAK/BpB,UAAW;AACTqB,OAAQ,CADC;AAETC,WAAY,EAFH;AAGTC,YAAa,EAHJ;AAITC,QAAS,EAJA,CALoB;;AAW/BvB,kBAAmB;AACjBwB,YAAa,CADI;AAEjBC,aAAc,CAFG;AAGjBC,gBAAiB,SAHA;AAIjBC,YAAa,SAJI,CAXY;;AAiB/BtB;AACEgB,WAAY,EADd;AAEEC,YAAa,EAFf;AAGEM,MAAO,iBAAOC,KAHhB;AAIK,sBAASC,MAAT,CAAgB;AACjBC,IAAK;AACHC,WAAY,MADT,CADY;;AAIjBC;AACK,gBAAMA,OAAN,CAAcC,IADnB,CAJiB;;AAOjBC,IAAK;AACHH,WAAY,MADT,CAPY,CAAhB,CAJL,CAjB+B,CAAlB,CAAf,C;;;;;;AAmCe5D,Q","file":"CheckBox.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  StyleSheet,\n  TouchableOpacity,\n  View,\n  Platform,\n  Text as NativeText,\n} from 'react-native';\nimport TextElement from '../text/Text';\nimport fonts from '../config/fonts';\nimport colors from '../config/colors';\nimport FAIcon from 'react-native-vector-icons/FontAwesome';\nimport getIconType from '../helpers/getIconType';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\nconst CheckBox = props => {\n  const {\n    component,\n    checked,\n    iconRight,\n    title,\n    center,\n    right,\n    containerStyle,\n    textStyle,\n    onPress,\n    onLongPress,\n    onIconPress,\n    onLongIconPress,\n    size,\n    checkedIcon,\n    uncheckedIcon,\n    iconType,\n    checkedColor,\n    uncheckedColor,\n    checkedTitle,\n    fontFamily,\n    ...attributes\n  } = props;\n\n  let Icon = FAIcon;\n  if (iconType) {\n    Icon = getIconType(iconType);\n  }\n  const Component = component || TouchableOpacity;\n  let iconName = uncheckedIcon;\n  if (checked) {\n    iconName = checkedIcon;\n  }\n  return (\n    <Component\n      {...attributes}\n      onLongPress={onLongPress}\n      onPress={onPress}\n      style={[\n        styles.container,\n        title && styles.containerHasTitle,\n        containerStyle && containerStyle,\n      ]}\n    >\n      <View\n        style={[\n          styles.wrapper,\n          right && { justifyContent: 'flex-end' },\n          center && { justifyContent: 'center' },\n        ]}\n      >\n        {!iconRight && (\n          <Icon\n            color={checked ? checkedColor : uncheckedColor}\n            name={iconName}\n            size={size || 24}\n            style={{ minWidth: size || 24 }}\n            onLongPress={onLongIconPress}\n            onPress={onIconPress}\n          />\n        )}\n\n        {React.isValidElement(title)\n          ? title\n          : title && (\n              <TextElement\n                style={[\n                  styles.text,\n                  textStyle && textStyle,\n                  fontFamily && { fontFamily },\n                ]}\n              >\n                {checked ? checkedTitle || title : title}\n              </TextElement>\n            )}\n\n        {iconRight && (\n          <Icon\n            color={checked ? checkedColor : uncheckedColor}\n            name={iconName}\n            size={size || 24}\n            style={{ minWidth: size || 24 }}\n            onLongPress={onLongIconPress}\n            onPress={onIconPress}\n          />\n        )}\n      </View>\n    </Component>\n  );\n};\n\nCheckBox.defaultProps = {\n  checked: false,\n  iconRight: false,\n  right: false,\n  center: false,\n  checkedColor: colors.primary,\n  uncheckedColor: '#bfbfbf',\n  checkedIcon: 'check-square-o',\n  uncheckedIcon: 'square-o',\n  size: 24,\n};\n\nCheckBox.propTypes = {\n  component: PropTypes.any,\n  checked: PropTypes.bool,\n  iconRight: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  center: PropTypes.bool,\n  right: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  textStyle: NativeText.propTypes.style,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  checkedIcon: PropTypes.string,\n  uncheckedIcon: PropTypes.string,\n  iconType: PropTypes.string,\n  size: PropTypes.number,\n  checkedColor: PropTypes.string,\n  uncheckedColor: PropTypes.string,\n  checkedTitle: PropTypes.string,\n  onIconPress: PropTypes.func,\n  onLongIconPress: PropTypes.func,\n  fontFamily: PropTypes.string,\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  container: {\n    margin: 5,\n    marginLeft: 10,\n    marginRight: 10,\n    padding: 10,\n  },\n  containerHasTitle: {\n    borderWidth: 1,\n    borderRadius: 3,\n    backgroundColor: '#fafafa',\n    borderColor: '#ededed',\n  },\n  text: {\n    marginLeft: 10,\n    marginRight: 10,\n    color: colors.grey1,\n    ...Platform.select({\n      ios: {\n        fontWeight: 'bold',\n      },\n      android: {\n        ...fonts.android.bold,\n      },\n      web: {\n        fontWeight: 'bold',\n      },\n    }),\n  },\n});\n\nexport default CheckBox;\n"]}