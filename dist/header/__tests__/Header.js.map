{"version":3,"sources":["../../../src/header/__tests__/Header.js"],"names":["btnCfg","icon","titleCfg","text","describe","it","component","expect","length","toBe","toMatchSnapshot","find","first","props","style","backgroundColor","at","hidden"],"mappings":"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","file":"Header.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-native';\nimport { shallow } from 'enzyme';\nimport toJson from 'enzyme-to-json';\n\nimport Header from '../Header';\nimport NavButton from '../NavButton';\nimport Title from '../Title';\n\nconst btnCfg = { icon: 'home' };\nconst titleCfg = { text: 'This is a title' };\n\ndescribe('Header Component', () => {\n  it('should render without issues', () => {\n    const component = shallow(<Header />);\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render children when passed in', () => {\n    const component = shallow(\n      <Header>\n        <Button title=\"Test button\" onPress={() => {}} />\n      </Header>\n    );\n\n    expect(component.find('Button').length).toBe(1);\n  });\n\n  it('should render multiple children when passed in', () => {\n    const component = shallow(\n      <Header>\n        <Button title=\"Test button 1\" onPress={() => {}} />\n        <Button title=\"Test button 2\" onPress={() => {}} />\n      </Header>\n    );\n\n    expect(component.find('Button').length).toBe(2);\n  });\n\n  it('should render left component by passing a config through props', () => {\n    const component = shallow(<Header leftComponent={btnCfg} />);\n\n    expect(component.find(NavButton).length).toBe(1);\n  });\n\n  it('should render left component by passing a component through props', () => {\n    const component = shallow(\n      <Header\n        leftComponent={<Button title=\"Test button\" onPress={() => {}} />}\n      />\n    );\n\n    expect(component.find('Button').length).toBe(1);\n  });\n\n  it('should render right component by passing a config through props', () => {\n    const component = shallow(<Header rightComponent={btnCfg} />);\n\n    expect(component.find(NavButton).length).toBe(1);\n  });\n\n  it('should render right component by passing a component through props', () => {\n    const component = shallow(\n      <Header\n        rightComponent={<Button title=\"Test button\" onPress={() => {}} />}\n      />\n    );\n\n    expect(component.find('Button').length).toBe(1);\n  });\n\n  it('should render center component by passing a config through props', () => {\n    const component = shallow(<Header centerComponent={titleCfg} />);\n\n    expect(component.find(Title).length).toBe(1);\n  });\n\n  it('should render center component by passing a component through props', () => {\n    const component = shallow(\n      <Header\n        centerComponent={<Button title=\"Test button\" onPress={() => {}} />}\n      />\n    );\n\n    expect(component.find('Button').length).toBe(1);\n  });\n\n  it('should allow to pass backgroundColor through prop', () => {\n    const component = shallow(<Header backgroundColor=\"#aaa\" />);\n\n    expect(\n      component.find('View').first().props().style[1].backgroundColor\n    ).toBe('#aaa');\n  });\n\n  it('should allow to pass styles through outerContainerStyles prop', () => {\n    const component = shallow(\n      <Header outerContainerStyles={{ backgroundColor: '#ccc' }} />\n    );\n\n    expect(component.find('View').at(0).props().style[2].backgroundColor).toBe(\n      '#ccc'\n    );\n  });\n\n  it('should allow to pass styles through innerContainerStyles prop', () => {\n    const component = shallow(\n      <Header innerContainerStyles={{ backgroundColor: '#ccc' }} />\n    );\n\n    expect(component.find('View').at(1).props().style[1].backgroundColor).toBe(\n      '#ccc'\n    );\n  });\n\n  it('should accept props for StatusBar', () => {\n    const component = shallow(<Header statusBarProps={{ hidden: true }} />);\n\n    expect(component.find('StatusBar').props().hidden).toBe(true);\n  });\n});\n"]}