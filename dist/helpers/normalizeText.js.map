{"version":3,"sources":["../../src/helpers/normalizeText.js"],"names":["React","require","PixelRatio","Dimensions","pixelRatio","get","deviceHeight","height","deviceWidth","width","normalize","size","module","exports"],"mappings":";;;;;;;;;;;AAWA,GAAMA,OAAQC,QAAQ,cAAR,CAAd,C;AACQC,U,CAA2BF,K,CAA3BE,U,CAAYC,U,CAAeH,K,CAAfG,U;;AAEpB,GAAMC,YAAaF,WAAWG,GAAX,EAAnB;AACA,GAAMC,cAAeH,WAAWE,GAAX,CAAe,QAAf,EAAyBE,MAA9C;AACA,GAAMC,aAAcL,WAAWE,GAAX,CAAe,QAAf,EAAyBI,KAA7C;;;;;;;;;;;AAWA,GAAMC,WAAY,QAAZA,UAAY,MAAQ;AACxB,GAAIN,YAAc,CAAd,EAAmBA,WAAa,CAApC,CAAuC;;AAErC,GAAII,YAAc,GAAlB,CAAuB;AACrB,MAAOG,MAAO,IAAd;AACD;;AAED,GAAIL,aAAe,GAAnB,CAAwB;AACtB,MAAOK,KAAP;;AAED,CAHD,IAGO,IAAIL,cAAgB,GAAhB,EAAuBA,cAAgB,GAA3C,CAAgD;AACrD,MAAOK,MAAO,IAAd;AACD;;AAED,MAAOA,MAAO,IAAd;AACD,CAdD,IAcO,IAAIP,YAAc,CAAd,EAAmBA,WAAa,GAApC,CAAyC;;;AAG9C,GAAII,aAAe,GAAnB,CAAwB;AACtB,MAAOG,KAAP;AACD;;AAED,GAAIL,aAAe,GAAnB,CAAwB;AACtB,MAAOK,MAAO,IAAd;;;AAGD;AACD,GAAIL,cAAgB,GAAhB,EAAuBA,cAAgB,GAA3C,CAAgD;AAC9C,MAAOK,MAAO,GAAd;AACD;;;AAGD,MAAOA,MAAO,IAAd;AACD,CAlBM,IAkBA,IAAIP,YAAc,GAAlB,CAAuB;;;AAG5B,GAAII,aAAe,GAAnB,CAAwB;AACtB,MAAOG,KAAP;;AAED;AACD,GAAIL,aAAe,GAAnB,CAAwB;AACtB,MAAOK,MAAO,GAAd;;;AAGD;AACD,GAAIL,cAAgB,GAAhB,EAAuBA,cAAgB,GAA3C,CAAgD;AAC9C,MAAOK,MAAO,IAAd;AACD;;AAED,MAAOA,MAAO,GAAd;AACD,CAjBM;;AAmBL,MAAOA,KAAP;AACH,CArDD;;AAuDAC,OAAOC,OAAP,CAAiBH,SAAjB","file":"normalizeText.js","sourcesContent":["//\n// Method to normalize size of fonts across devices\n//\n// Some code taken from https://jsfiddle.net/97ty7yjk/ &\n// https://stackoverflow.com/questions/34837342/font-size-on-iphone-6s-plus\n//\n// author: @xiaoneng\n// date: 14/10/2016\n// version: 03\n//\n\nconst React = require('react-native'); // eslint-disable-line no-undef\nconst { PixelRatio, Dimensions } = React;\n\nconst pixelRatio = PixelRatio.get();\nconst deviceHeight = Dimensions.get('window').height;\nconst deviceWidth = Dimensions.get('window').width;\n\n// -- Testing Only --\n// const fontScale = PixelRatio.getFontScale();\n// const layoutSize = PixelRatio.getPixelSizeForLayoutSize(14);\n// console.log('normalizeText getPR ->', pixelRatio);\n// console.log('normalizeText getFS ->', fontScale);\n// console.log('normalizeText getDH ->', deviceHeight);\n// console.log('normalizeText getDW ->', deviceWidth);\n// console.log('normalizeText getPSFLS ->', layoutSize);\n\nconst normalize = size => {\n  if (pixelRatio >= 2 && pixelRatio < 3) {\n    // iphone 5s and older Androids\n    if (deviceWidth < 360) {\n      return size * 0.95;\n    }\n    // iphone 5\n    if (deviceHeight < 667) {\n      return size;\n      // iphone 6-6s\n    } else if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.15;\n    }\n    // older phablets\n    return size * 1.25;\n  } else if (pixelRatio >= 3 && pixelRatio < 3.5) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n      return size;\n    }\n    // Catch other weird android width sizings\n    if (deviceHeight < 667) {\n      return size * 1.15;\n      // catch in-between size Androids and scale font up\n      // a tad but not too much\n    }\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.2;\n    }\n    // catch larger devices\n    // ie iphone 6s plus / 7 plus / mi note 等等\n    return size * 1.27;\n  } else if (pixelRatio >= 3.5) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n      return size;\n      // Catch other smaller android height sizings\n    }\n    if (deviceHeight < 667) {\n      return size * 1.2;\n      // catch in-between size Androids and scale font up\n      // a tad but not too much\n    }\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.25;\n    }\n    // catch larger phablet devices\n    return size * 1.4;\n  } else\n    // if older device ie pixelRatio !== 2 || 3 || 3.5\n    return size;\n};\n\nmodule.exports = normalize; // eslint-disable-line no-undef\n"]}