{"version":3,"sources":["../../../src/avatar/__tests__/Avatar.web.test.js"],"names":["props","noProps","component","enzyme","tests","styleguidist","shallow","snapshot","getJsxString","width","height","onPress","console","log","onLongPress","containerStyle","padding","source","avatarStyle","transform","rotateZ","rounded","title","titleStyle","fontWeight","overlayContainerStyle","borderWidth","activeOpacity","icon","name","color","size","type","iconStyle","small","medium","large","xlarge","showEditButton","onEditPress","editButton","iconName","iconType","iconColor","underlayColor","style","backgroundColor","samples","Misc","sectionComponents","Avatar","describe","it","expect","length","toBe","toMatchSnapshot","uri"],"mappings":"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","file":"Avatar.web.test.js","sourcesContent":["import React from 'react';\r\nimport { Text, TouchableHighlight, TouchableOpacity, View } from 'react-native';\r\nimport parseSamples, {\r\n  assignRef,\r\n  genRefId,\r\n} from 'enzyme-styleguidist-sample-parser';\r\nimport options, {\r\n  snapShot,\r\n  buildJsxForGuideMethod,\r\n  ensureCalled,\r\n  onlyEnsureCalled,\r\n  onlySnapshots,\r\n} from '../../../samples';\r\nimport { shallow } from 'enzyme';\r\nimport toJson from 'enzyme-to-json';\r\nimport Avatar from '../Avatar';\r\n\r\nconst props = {\r\n  noProps: {\r\n    component: Avatar,\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  component: {\r\n    component: Avatar,\r\n    props: { component: TouchableOpacity },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      getJsxString: () => {\r\n        return `const TouchableWithoutFeedback = RN.TouchableWithoutFeedback;\r\n  <Avatar \r\n    component={TouchableWithoutFeedback}\r\n    onPress={() => console.log('pressed')}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n  'width & height': {\r\n    component: Avatar,\r\n    props: { width: 68, height: 34 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  onPress: {\r\n    component: Avatar,\r\n    props: {\r\n      onPress: () => {\r\n        console.log('pressed');\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  onLongPress: {\r\n    component: Avatar,\r\n    props: {\r\n      onLongPress: () => {\r\n        console.log('pressed, long');\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  containerStyle: {\r\n    component: Avatar,\r\n    props: { containerStyle: { padding: 50 } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  source: {\r\n    component: Avatar,\r\n    props: {\r\n      source: 'hero.jpg',\r\n      width: 250,\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  avatarStyle: {\r\n    component: Avatar,\r\n    props: {\r\n      source: 'hero.jpg',\r\n      avatarStyle: { transform: [{ rotateZ: '-45deg' }] },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  rounded: {\r\n    component: Avatar,\r\n    props: { rounded: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  title: {\r\n    component: Avatar,\r\n    props: { title: 'hero' },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  titleStyle: {\r\n    component: Avatar,\r\n    props: { title: 'hero', titleStyle: { fontWeight: 'bold' } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  overlayContainerStyle: {\r\n    component: Avatar,\r\n    props: { overlayContainerStyle: { borderWidth: 5 } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  activeOpacity: {\r\n    component: Avatar,\r\n    props: {\r\n      onPress: () => {},\r\n      activeOpacity: 0.71,\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  icon: {\r\n    component: Avatar,\r\n    props: {\r\n      icon: { name: 'sms', color: '#071', size: 35, type: 'octicons' },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  iconStyle: {\r\n    component: Avatar,\r\n    props: {\r\n      icon: { name: 'sms', color: '#071', size: 35, type: 'octicons' },\r\n      iconStyle: { transform: [{ rotateZ: '-45deg' }] },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  small: {\r\n    component: Avatar,\r\n    props: { small: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  medium: {\r\n    component: Avatar,\r\n    props: { medium: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  large: {\r\n    component: Avatar,\r\n    props: { large: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  xlarge: {\r\n    component: Avatar,\r\n    props: { xlarge: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  showEditButton: {\r\n    component: Avatar,\r\n    props: { showEditButton: true },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  onEditPress: {\r\n    component: Avatar,\r\n    props: {\r\n      showEditButton: true,\r\n      onEditPress: () => {\r\n        console.log('edit pressed');\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  editButton: {\r\n    component: Avatar,\r\n    props: {\r\n      xlarge: true,\r\n      showEditButton: true,\r\n      editButton: {\r\n        size: 30,\r\n        iconName: 'sms',\r\n        iconType: 'octicons',\r\n        iconColor: '#071',\r\n        underlayColor: 'yellow',\r\n        style: { backgroundColor: '#7d8' },\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n};\r\n\r\nconst samples = {\r\n  props,\r\n};\r\n\r\nparseSamples(\r\n  {\r\n    Misc: { sectionComponents: { Avatar: { samples } } },\r\n  },\r\n  options\r\n);\r\n\r\ndescribe('Avatar Component', () => {\r\n  it('should render without issues', () => {\r\n    const component = shallow(<Avatar />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render small avatar', () => {\r\n    const component = shallow(\r\n      <Avatar\r\n        small\r\n        rounded\r\n        source={{\r\n          uri:\r\n            'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\r\n        }}\r\n        activeOpacity={0.7}\r\n        avatarStyle={{ backgroundColor: 'peru' }}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render medium avatar', () => {\r\n    const component = shallow(\r\n      <Avatar\r\n        medium\r\n        rounded\r\n        source={{\r\n          uri:\r\n            'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\r\n        }}\r\n        activeOpacity={0.7}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render large avatar', () => {\r\n    const component = shallow(\r\n      <Avatar\r\n        large\r\n        rounded\r\n        icon={{ color: 'blue', name: 'name', size: 22, type: 'type' }}\r\n        activeOpacity={0.7}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render xlarge avatar', () => {\r\n    const component = shallow(\r\n      <Avatar xlarge rounded title=\"avatar title\" activeOpacity={0.7} />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render avatar without width', () => {\r\n    const component = shallow(\r\n      <Avatar\r\n        height={90}\r\n        source={{\r\n          uri:\r\n            'https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg',\r\n        }}\r\n        activeOpacity={0.7}\r\n        avatarStyle={{ backgroundColor: 'peru' }}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render avatar without height', () => {\r\n    const component = shallow(\r\n      <Avatar width={80} title=\"avatar title\" titleStyle={{ color: 'red' }} />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n});\r\n"]}