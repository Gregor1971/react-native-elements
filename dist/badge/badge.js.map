{"version":3,"sources":["../../src/badge/badge.js"],"names":["Badge","containerStyle","props","textStyle","wrapperStyle","onPress","component","value","children","element","attributes","Component","childElement","styles","text","console","error","touchableProps","container","badge","propTypes","style","oneOfType","arrayOf","string","number","func","create","flexDirection","padding","paddingTop","paddingBottom","backgroundColor","primary","borderRadius","alignItems","justifyContent","fontSize","color"],"mappings":";AACA,qC;AACA,4B;AACA;AACA,wC;AACA,sD;;AAEA,GAAMA,OAAQ,QAARA,MAAQ,OAAS;;AAEnBC,cAFmB;;;;;;;;;AAWjBC,KAXiB,CAEnBD,cAFmB,CAGnBE,SAHmB,CAWjBD,KAXiB,CAGnBC,SAHmB,CAInBC,YAJmB,CAWjBF,KAXiB,CAInBE,YAJmB,CAKnBC,OALmB,CAWjBH,KAXiB,CAKnBG,OALmB,CAMnBC,SANmB,CAWjBJ,KAXiB,CAMnBI,SANmB,CAOnBC,KAPmB,CAWjBL,KAXiB,CAOnBK,KAPmB,CAQnBC,QARmB,CAWjBN,KAXiB,CAQnBM,QARmB,CASnBC,OATmB,CAWjBP,KAXiB,CASnBO,OATmB,CAUhBC,UAVgB,0BAWjBR,KAXiB;;AAarB,GAAIO,OAAJ,CAAa,MAAOA,QAAP;;AAEb,GAAIE,4BAAJ;AACA,GAAIC;AACF,iDAAM,MAAO,CAACC,OAAOC,IAAR,CAAcX,WAAaA,SAA3B,CAAb,EAAqDI,KAArD,CADF;;;AAIA,GAAIC,QAAJ,CAAc;AACZI,aAAeJ,QAAf;AACD;;AAED,GAAIA,UAAYD,KAAhB,CAAuB;AACrBQ,QAAQC,KAAR,CAAc,sDAAd;AACD;;AAED,GAAIC,gBAAiB,EAArB;AACA,GAAI,CAACX,SAAD,EAAcD,OAAlB,CAA2B;AACzBM;AACAM,eAAiB,CAAEZ,eAAF,CAAjB;AACD;;AAED,GAAIC,SAAJ,CAAeK,UAAYL,SAAZ;;AAEf;AACE,iDAAM,MAAO,CAACO,OAAOK,SAAP,EAAoBd,YAApB,EAAoCA,YAArC,CAAb;AACE,8BAAC,SAAD;AACMM,UADN;AAEE,MAAO,CAACG,OAAOM,KAAR,CAAelB,gBAAkBA,cAAjC,CAFT;AAGMgB,cAHN;;AAKGL,YALH,CADF,CADF;;;;AAWD,CA/CD;;AAiDAZ,MAAMoB,SAAN,CAAkB;AAChBnB,eAAgB,wBAAcoB,KADd;AAEhBjB,aAAc,wBAAciB,KAFZ;AAGhBlB,UAAW,kBAAKiB,SAAL,CAAeC,KAHV;AAIhBb,SAAU,oBAAUc,SAAV,CAAoB;AAC5B,oBAAUb,OADkB;AAE5B,oBAAUc,OAAV,CAAkB,oBAAUd,OAA5B,CAF4B,CAApB,CAJM;;AAQhBF,MAAO,oBAAUe,SAAV,CAAoB,CAAC,oBAAUE,MAAX,CAAmB,oBAAUC,MAA7B,CAApB,CARS;AAShBpB,QAAS,oBAAUqB,IATH;AAUhBpB,UAAW,oBAAUoB,IAVL;AAWhBjB,QAAS,oBAAUA,OAXH,CAAlB;;;AAcA,GAAMI,QAAS,wBAAWc,MAAX,CAAkB;AAC/BT,UAAW;AACTU,cAAe,KADN,CADoB;;AAI/BT,MAAO;AACLU,QAAS,EADJ;AAELC,WAAY,CAFP;AAGLC,cAAe,CAHV;AAILC,gBAAiB,iBAAOC,OAJnB;AAKLC,aAAc,EALT;AAMLC,WAAY,QANP;AAOLC,eAAgB,QAPX,CAJwB;;AAa/BtB,KAAM;AACJuB,SAAU,EADN;AAEJC,MAAO,OAFH,CAbyB,CAAlB,CAAf,C;;;;AAmBetC,K","file":"badge.js","sourcesContent":["/*eslint-disable no-console */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native';\nimport colors from '../config/colors';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\nconst Badge = props => {\n  const {\n    containerStyle,\n    textStyle,\n    wrapperStyle,\n    onPress,\n    component,\n    value,\n    children,\n    element,\n    ...attributes\n  } = props;\n\n  if (element) return element;\n\n  let Component = View;\n  let childElement = (\n    <Text style={[styles.text, textStyle && textStyle]}>{value}</Text>\n  );\n\n  if (children) {\n    childElement = children;\n  }\n\n  if (children && value) {\n    console.error('Badge can only contain either child element or value');\n  }\n\n  let touchableProps = {};\n  if (!component && onPress) {\n    Component = TouchableOpacity;\n    touchableProps = { onPress };\n  }\n\n  if (component) Component = component;\n\n  return (\n    <View style={[styles.container && wrapperStyle && wrapperStyle]}>\n      <Component\n        {...attributes}\n        style={[styles.badge, containerStyle && containerStyle]}\n        {...touchableProps}\n      >\n        {childElement}\n      </Component>\n    </View>\n  );\n};\n\nBadge.propTypes = {\n  containerStyle: ViewPropTypes.style,\n  wrapperStyle: ViewPropTypes.style,\n  textStyle: Text.propTypes.style,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.arrayOf(PropTypes.element),\n  ]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onPress: PropTypes.func,\n  component: PropTypes.func,\n  element: PropTypes.element,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n  },\n  badge: {\n    padding: 12,\n    paddingTop: 3,\n    paddingBottom: 3,\n    backgroundColor: colors.primary,\n    borderRadius: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 14,\n    color: 'white',\n  },\n});\n\nexport default Badge;\n"]}