{"version":3,"sources":["../../../src/badge/__tests__/badge.js"],"names":["describe","it","component","expect","length","toBe","toMatchSnapshot","props","children","title","color","backgroundColor","find"],"mappings":"AAAA,4B;AACA;AACA;AACA,4C;AACA,+B;;AAEAA,SAAS,iBAAT,CAA4B,UAAM;AAChCC,GAAG,6BAAH,CAAkC,UAAM;AACtC,GAAMC,WAAY,oBAAQ,mDAAR,CAAlB;;AAEAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CALD;;AAOAL,GAAG,mDAAH,CAAwD,UAAM;AAC5D,GAAMC,WAAY;AAChB,+CAAO,MAAM,OAAb;AACE,qDADF,CADgB,CAAlB;;;;AAMAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CATD;;AAWAL,GAAG,mCAAH,CAAwC,UAAM;AAC5C,GAAMC,WAAY;AAChB;AACE,iDAAM,MAAM,KAAZ,EADF,CADgB,CAAlB;;;;AAMAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACAH,OAAOD,UAAUK,KAAV,GAAkBC,QAAlB,CAA2BD,KAA3B,CAAiCC,QAAjC,CAA0CD,KAA1C,CAAgDE,KAAvD,EAA8DJ,IAA9D,CAAmE,KAAnE;AACD,CAVD;;AAYAJ,GAAG,2CAAH,CAAgD,UAAM;AACpD,GAAMC,WAAY,oBAAQ,+CAAO,MAAM,KAAb,EAAR,CAAlB;;AAEAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CALD;;AAOAL,GAAG,sCAAH,CAA2C,UAAM;AAC/C,GAAMC,WAAY,oBAAQ,+CAAO,UAAW,CAAEQ,MAAO,QAAT,CAAlB,EAAR,CAAlB;;AAEAP,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CALD;;AAOAL,GAAG,2CAAH,CAAgD,UAAM;AACpD,GAAMC,WAAY;AAChB,+CAAO,eAAgB,CAAES,gBAAiB,QAAnB,CAAvB,EADgB,CAAlB;;;AAIAR,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAPD;;AASAL,GAAG,oCAAH,CAAyC,UAAM;AAC7C,GAAMC,WAAY,oBAAQ,+CAAO,QAAS,6DAAhB,EAAR,CAAlB;;AAEAC,OAAOD,UAAUU,IAAV,CAAe,MAAf,EAAuBL,KAAvB,GAA+BC,QAAtC,EAAgDH,IAAhD,CAAqD,OAArD;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CALD;;AAOAL,GAAG,4BAAH,CAAiC,UAAM;AACrC,GAAMC,WAAY,oBAAQ,+CAAO,aAAc,EAArB,EAAR,CAAlB;;AAEAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CALD;AAMD,CAnED","file":"badge.js","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport { shallow } from 'enzyme';\nimport toJson from 'enzyme-to-json';\nimport Badge from '../badge';\n\ndescribe('Badge Component', () => {\n  it('should render without issue', () => {\n    const component = shallow(<Badge />);\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should show error if value and child are included', () => {\n    const component = shallow(\n      <Badge value=\"Hello\">\n        <Text />\n      </Badge>\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render if element included', () => {\n    const component = shallow(\n      <Badge>\n        <Text title=\"foo\" />\n      </Badge>\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n    expect(component.props().children.props.children.props.title).toBe('foo');\n  });\n\n  it('should pass value props should still work', () => {\n    const component = shallow(<Badge value=\"foo\" />);\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should apply text style in the badge', () => {\n    const component = shallow(<Badge textStyle={{ color: 'orange' }} />);\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should apply container style in the badge', () => {\n    const component = shallow(\n      <Badge containerStyle={{ backgroundColor: 'orange' }} />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should allow adding custom element', () => {\n    const component = shallow(<Badge element={<Text>Hello</Text>} />);\n\n    expect(component.find('Text').props().children).toBe('Hello');\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should allow wrapper style', () => {\n    const component = shallow(<Badge wrapperStyle={{}} />);\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n});\n"]}