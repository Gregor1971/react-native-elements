{"version":3,"sources":["../../../src/badge/__tests__/badge.web.test.js"],"names":["props","noProps","component","enzyme","tests","styleguidist","value","containerStyle","backgroundColor","wrapperStyle","alignSelf","textStyle","fontSize","children","color","script","onPress","console","log","shallow","snapshot","getJsxString","samples","Misc","sectionComponents","Badge","describe","it","expect","length","toBe","toMatchSnapshot","title","find"],"mappings":"AAAA,4B;AACA;AACA;AACA,4C;AACA,+B;;AAEA,iF;;;;AAIA,yC;;;;;;;;AAQA,GAAMA,OAAQ;AACZC,QAAS;AACPC,yBADO;AAEPC,OAAQ;AACNC,4BADM,CAFD;;AAKPC,aAAc,EALP,CADG;;AAQZC,MAAO;AACLJ,yBADK;AAELF,MAAO,CAAEM,MAAO,CAAT,CAFF;AAGLH,OAAQ;AACNC,4BADM,CAHH;;AAMLC,aAAc,EANT,CARK;;AAgBZE,eAAgB;AACdL,yBADc;AAEdF,MAAO,CAAEM,MAAO,OAAT,CAAkBC,eAAgB,CAAEC,gBAAiB,MAAnB,CAAlC,CAFO;AAGdL,OAAQ;AACNC,4BADM,CAHM;;AAMdC,aAAc,EANA,CAhBJ;;AAwBZI,aAAc;AACZP,yBADY;AAEZF,MAAO,CAAEM,MAAO,OAAT,CAAkBG,aAAc,CAAEC,UAAW,YAAb,CAAhC,CAFK;AAGZP,OAAQ;AACNC,4BADM,CAHI;;AAMZC,aAAc,EANF,CAxBF;;AAgCZM,UAAW;AACTT,yBADS;AAETF,MAAO;AACLM,MAAO,OADF;AAELK,UAAW,CAAEC,SAAU,EAAZ,CAFN,CAFE;;AAMTT,OAAQ;AACNC,4BADM,CANC;;AASTC,aAAc,EATL,CAhCC;;AA2CZQ,SAAU;AACRX,yBADQ;AAERW,SAAU;AACR,iDAAM,MAAO,CAAEC,MAAO,OAAT,CAAb,gBADQ;AAER,iDAAM,MAAO,CAAEA,MAAO,OAAT,CAAb,gBAFQ,CAFF;;AAMRX,OAAQ;AACNC,4BADM,CANA;;AASRC,aAAc;AACZU,gCADY,CATN,CA3CE;;;AAwDZC,QAAS;AACPd,yBADO;AAEPF,MAAO;AACLM,MAAO,OADF;AAELU,QAAS,kBAAM;AACbC,QAAQC,GAAR,CAAY,SAAZ;AACD,CAJI,CAFA;;AAQPf,OAAQ;AACNC,MAAO,CAAEe,QAAS,CAAEC,SAAU,uBAAZ,CAAX,CADD,CARD;;AAWPf,aAAc,EAXP,CAxDG;;AAqEZH,UAAW;AACTA,yBADS;AAETF,MAAO,CAAEE,uCAAF,CAFE;AAGTC,OAAQ;AACNC,MAAO,CAAEe,QAAS,CAAEC,SAAU,uBAAZ,CAAX,CADD,CAHC;;AAMTf,aAAc;AACZgB,aAAc,uBAAM;AAClB;;;;;;;AAOD,CATW,CANL,CArEC,CAAd;;;;;AAyFA,GAAMC,SAAU;AACdtB,WADc,CAAhB;;;AAIA;AACE;AACEuB,KAAM,CAAEC,kBAAmB,CAAEC,MAAO,CAAEH,eAAF,CAAT,CAArB,CADR,CADF;;;;;AAOAI,SAAS,aAAT,CAAwB,UAAM;AAC5BC,GAAG,6BAAH,CAAkC,UAAM;AACtC,GAAMzB,WAAY,oBAAQ,mDAAR,CAAlB;;AAEA0B,OAAO1B,UAAU2B,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAO1B,SAAP,CAAP,EAA0B6B,eAA1B;AACD,CALD;;AAOAJ,GAAG,mDAAH,CAAwD,UAAM;AAC5D,GAAMzB,WAAY;AAChB,+CAAO,MAAM,OAAb;AACE,qDADF,CADgB,CAAlB;;;;AAMA0B,OAAO1B,UAAU2B,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAO1B,SAAP,CAAP,EAA0B6B,eAA1B;AACD,CATD;;AAWAJ,GAAG,mCAAH,CAAwC,UAAM;AAC5C,GAAMzB,WAAY;AAChB;AACE,iDAAM,MAAM,KAAZ,EADF,CADgB,CAAlB;;;;AAMA0B,OAAO1B,UAAU2B,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAO1B,SAAP,CAAP,EAA0B6B,eAA1B;AACAH,OAAO1B,UAAUF,KAAV,GAAkBa,QAAlB,CAA2Bb,KAA3B,CAAiCa,QAAjC,CAA0Cb,KAA1C,CAAgDgC,KAAvD,EAA8DF,IAA9D,CAAmE,KAAnE;AACD,CAVD;;AAYAH,GAAG,2CAAH,CAAgD,UAAM;AACpD,GAAMzB,WAAY,oBAAQ,+CAAO,MAAM,KAAb,EAAR,CAAlB;;AAEA0B,OAAO1B,UAAU2B,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAO1B,SAAP,CAAP,EAA0B6B,eAA1B;AACD,CALD;;AAOAJ,GAAG,sCAAH,CAA2C,UAAM;AAC/C,GAAMzB,WAAY,oBAAQ,+CAAO,UAAW,CAAEY,MAAO,QAAT,CAAlB,EAAR,CAAlB;;AAEAc,OAAO1B,UAAU2B,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAO1B,SAAP,CAAP,EAA0B6B,eAA1B;AACD,CALD;;AAOAJ,GAAG,2CAAH,CAAgD,UAAM;AACpD,GAAMzB,WAAY;AAChB,+CAAO,eAAgB,CAAEM,gBAAiB,QAAnB,CAAvB,EADgB,CAAlB;;;AAIAoB,OAAO1B,UAAU2B,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAO1B,SAAP,CAAP,EAA0B6B,eAA1B;AACD,CAPD;;AASAJ,GAAG,oCAAH,CAAyC,UAAM;AAC7C,GAAMzB,WAAY,oBAAQ,+CAAO,QAAS,6DAAhB,EAAR,CAAlB;;AAEA0B,OAAO1B,UAAU+B,IAAV,CAAe,MAAf,EAAuBjC,KAAvB,GAA+Ba,QAAtC,EAAgDiB,IAAhD,CAAqD,OAArD;AACAF,OAAO,2BAAO1B,SAAP,CAAP,EAA0B6B,eAA1B;AACD,CALD;;AAOAJ,GAAG,4BAAH,CAAiC,UAAM;AACrC,GAAMzB,WAAY,oBAAQ,+CAAO,aAAc,EAArB,EAAR,CAAlB;;AAEA0B,OAAO1B,UAAU2B,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAO1B,SAAP,CAAP,EAA0B6B,eAA1B;AACD,CALD;AAMD,CAnED","file":"badge.web.test.js","sourcesContent":["import React from 'react';\r\nimport { Text, TouchableHighlight, TouchableOpacity, View } from 'react-native';\r\nimport { shallow } from 'enzyme';\r\nimport toJson from 'enzyme-to-json';\r\nimport Badge from '../badge';\r\n\r\nimport parseSamples, {\r\n  assignRef,\r\n  genRefId,\r\n} from 'enzyme-styleguidist-sample-parser';\r\nimport options, {\r\n  snapShot,\r\n  buildJsxForGuideMethod,\r\n  ensureCalled,\r\n  onlyEnsureCalled,\r\n  onlySnapshots,\r\n} from '../../../samples';\r\n\r\nconst props = {\r\n  noProps: {\r\n    component: Badge,\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  value: {\r\n    component: Badge,\r\n    props: { value: 7 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  containerStyle: {\r\n    component: Badge,\r\n    props: { value: 'seven', containerStyle: { backgroundColor: '#071' } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  wrapperStyle: {\r\n    component: Badge,\r\n    props: { value: 'seven', wrapperStyle: { alignSelf: 'flex-start' } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  textStyle: {\r\n    component: Badge,\r\n    props: {\r\n      value: 'seven',\r\n      textStyle: { fontSize: 30 },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  children: {\r\n    component: Badge,\r\n    children: [\r\n      <Text style={{ color: 'white' }}>a text node</Text>,\r\n      <Text style={{ color: 'white' }}>a text node</Text>,\r\n    ],\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {\r\n      script: `const Text = RN.Text;\\n`,\r\n    },\r\n  },\r\n  onPress: {\r\n    component: Badge,\r\n    props: {\r\n      value: 'press',\r\n      onPress: () => {\r\n        console.log('pressed');\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  component: {\r\n    component: Badge,\r\n    props: { component: TouchableOpacity },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      getJsxString: () => {\r\n        return `const TouchableWithoutFeedback = RN.TouchableWithoutFeedback;\r\n  <Badge \r\n    value='TouchableWithoutFeedback'\r\n    component={TouchableWithoutFeedback}\r\n    textStyle={{ color: '#071'}}\r\n    onPress={() => console.log('pressed')}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst samples = {\r\n  props,\r\n};\r\n\r\nparseSamples(\r\n  {\r\n    Misc: { sectionComponents: { Badge: { samples } } },\r\n  },\r\n  options\r\n);\r\n\r\ndescribe('Badge Badge', () => {\r\n  it('should render without issue', () => {\r\n    const component = shallow(<Badge />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should show error if value and child are included', () => {\r\n    const component = shallow(\r\n      <Badge value=\"Hello\">\r\n        <Text />\r\n      </Badge>\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render if element included', () => {\r\n    const component = shallow(\r\n      <Badge>\r\n        <Text title=\"foo\" />\r\n      </Badge>\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n    expect(component.props().children.props.children.props.title).toBe('foo');\r\n  });\r\n\r\n  it('should pass value props should still work', () => {\r\n    const component = shallow(<Badge value=\"foo\" />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should apply text style in the badge', () => {\r\n    const component = shallow(<Badge textStyle={{ color: 'orange' }} />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should apply container style in the badge', () => {\r\n    const component = shallow(\r\n      <Badge containerStyle={{ backgroundColor: 'orange' }} />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should allow adding custom element', () => {\r\n    const component = shallow(<Badge element={<Text>Hello</Text>} />);\r\n\r\n    expect(component.find('Text').props().children).toBe('Hello');\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should allow wrapper style', () => {\r\n    const component = shallow(<Badge wrapperStyle={{}} />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n});\r\n"]}