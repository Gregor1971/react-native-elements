{"version":3,"sources":["../../src/slider/Slider.js"],"names":["TRACK_SIZE","THUMB_SIZE","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","inOut","ease","delay","Slider","props","state","containerSize","width","height","trackSize","thumbSize","value","Value","length","nextProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","toValue","start","panResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","bind","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","_previousPos","getThumbPos","getCurrentValue","fireChangeEvent","e","gestureState","disabled","getValue","event","nativeEvent","layout","size","setState","prevState","orientation","thumbPos","dy","dx","ratio","step","Math","max","minimumValue","min","maximumValue","round","__getValue","getRatio","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","style","trackStyle","thumbStyle","debugTouchArea","thumbTouchSize","onSlidingStart","onSlidingComplete","other","process","env","NODE_ENV","onValueChange","mainStyles","styles","interpolate","inputRange","outputRange","valueVisibleStyle","minimumTrackStyle","position","add","backgroundColor","thumbStyleTransform","transform","thumbTransform","translateX","translateY","maximumTrackStyle","container","measureContainer","track","measureTrack","measureThumb","top","bottom","left","right","thumb","panHandlers","propTypes","number","bool","string","shape","func","oneOf","object","defaultProps","flex","borderRadius","touchArea","debugThumbTouchArea","opacity"],"mappings":"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","file":"Slider.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { View, StyleSheet, Animated, Easing, PanResponder } from 'react-native';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\n// import shallowCompare from 'react-addons-shallow-compare';\n// import styleEqual from 'style-equal'\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n\nexport default class Slider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      containerSize: { width: 0, height: 0 },\n      trackSize: { width: 0, height: 0 },\n      thumbSize: { width: 0, height: 0 },\n      value: new Animated.Value(props.value),\n      length: 0,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    var newValue = nextProps.value;\n\n    if (this.props.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      } else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    var animationType = this.props.animationType;\n    var animationConfig = Object.assign(\n      {},\n      DEFAULT_ANIMATION_CONFIGS[animationType],\n      this.props.animationConfig,\n      {\n        toValue: value,\n      }\n    );\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  componentWillMount() {\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponder: () => false,\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(\n        this\n      ),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n    });\n  }\n\n  handlePanResponderGrant(/*e: Object, gestureState: Object*/) {\n    this._previousPos = this.getThumbPos(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(e, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  handlePanResponderEnd(e, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  measureContainer(e) {\n    const { width, height } = e.nativeEvent.layout;\n    const size = { width, height };\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        containerSize: size,\n        length:\n          this.props.orientation === 'vertical'\n            ? size.height - prevState.thumbSize.height\n            : size.width - prevState.thumbSize.width,\n      };\n    });\n  }\n\n  measureTrack(e) {\n    const { width, height } = e.nativeEvent.layout;\n    const size = { width, height };\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        trackSize: size,\n      };\n    });\n  }\n\n  measureThumb(e) {\n    const { width, height } = e.nativeEvent.layout;\n    const size = { width, height };\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        thumbSize: size,\n        length:\n          this.props.orientation === 'vertical'\n            ? size.height - prevState.thumbSize.height\n            : size.width - prevState.thumbSize.width,\n      };\n    });\n  }\n\n  getValue(gestureState) {\n    var thumbPos =\n      this._previousPos +\n      (this.props.orientation === 'vertical'\n        ? gestureState.dy\n        : gestureState.dx);\n\n    var ratio = thumbPos / this.state.length;\n\n    if (this.props.step) {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          this.props.minimumValue +\n            Math.round(\n              ratio *\n                (this.props.maximumValue - this.props.minimumValue) /\n                this.props.step\n            ) *\n              this.props.step\n        )\n      );\n    } else {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          ratio * (this.props.maximumValue - this.props.minimumValue) +\n            this.props.minimumValue\n        )\n      );\n    }\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (\n      (value - this.props.minimumValue) /\n      (this.props.maximumValue - this.props.minimumValue)\n    );\n  }\n\n  getThumbPos(value) {\n    var ratio = this.getRatio(value);\n    return ratio * this.state.length;\n  }\n\n  render() {\n    const {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      debugTouchArea,\n      thumbTouchSize,\n      onSlidingStart,\n      onSlidingComplete,\n      animationType,\n      animateTransitions,\n      animationConfig,\n      orientation,\n      ...other\n    } = this.props;\n\n    if (process.env.NODE_ENV !== 'test') {\n      delete other.onValueChange;\n    }\n\n    var { value, containerSize, trackSize, thumbSize, length } = this.state;\n\n    var mainStyles = containerStyle || styles;\n    var thumbPos = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: [0, length],\n      // outputRange: orientation === 'vertical' ? [length, 0] : [0, length],\n      //extrapolate: 'clamp',\n    });\n\n    var valueVisibleStyle = {};\n\n    var minimumTrackStyle = {\n      position: 'absolute',\n      width:\n        orientation === 'vertical'\n          ? TRACK_SIZE\n          : Animated.add(thumbPos, thumbSize.width / 2),\n      height:\n        orientation === 'vertical'\n          ? Animated.add(thumbPos, thumbSize.height / 2)\n          : TRACK_SIZE,\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle,\n    };\n\n    const thumbStyleTransform = (thumbStyle && thumbStyle.transform) || [];\n    const thumbTransform =\n      orientation === 'vertical'\n        ? [\n            {\n              translateX: (trackSize.width - thumbSize.width) / 2,\n            },\n            { translateY: thumbPos },\n          ]\n        : [\n            { translateX: thumbPos },\n            {\n              translateY: (trackSize.height - thumbSize.height) / 2,\n            },\n          ];\n\n    const maximumTrackStyle =\n      orientation === 'vertical'\n        ? { width: TRACK_SIZE, height: '100%' }\n        : { width: '100%', height: TRACK_SIZE };\n    return (\n      <View\n        {...other}\n        style={[mainStyles.container, style]}\n        onLayout={e => {\n          this.measureContainer(e);\n        }}\n      >\n        <View\n          style={[\n            { backgroundColor: maximumTrackTintColor },\n            mainStyles.track,\n            maximumTrackStyle,\n            trackStyle,\n          ]}\n          onLayout={e => {\n            this.measureTrack(e);\n          }}\n        />\n        <Animated.View\n          style={[mainStyles.track, trackStyle, minimumTrackStyle]}\n        />\n        <Animated.View\n          onLayout={e => {\n            this.measureThumb(e);\n          }}\n          hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}\n          style={[\n            { backgroundColor: thumbTintColor },\n            mainStyles.thumb,\n            thumbStyle,\n            {\n              transform: thumbTransform,\n            },\n          ]}\n          {...this.panResponder.panHandlers}\n        />\n      </View>\n    );\n  }\n}\n\nSlider.propTypes = {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: PropTypes.number,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: PropTypes.number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: PropTypes.number,\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: PropTypes.string,\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n  }),\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart: PropTypes.func,\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete: PropTypes.func,\n\n  /**\n   * The style applied to the slider container.\n   */\n  style: ViewPropTypes.style,\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle: ViewPropTypes.style,\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle: ViewPropTypes.style,\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: PropTypes.bool,\n\n  /**\n  * Set to true to animate values with default 'timing' animation type\n  */\n  animateTransitions: PropTypes.bool,\n\n  /**\n  * Custom Animation type. 'spring' or 'timing'.\n  */\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n\n  /**\n  * Choose the orientation. 'horizontal' or 'vertical'.\n  */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n  * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n  */\n  animationConfig: PropTypes.object,\n  containerStyle: ViewPropTypes.style,\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: { width: 40, height: 40 },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  },\n});\n"]}