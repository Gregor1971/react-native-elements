{"version":3,"sources":["../../src/slider/Slider.js"],"names":["TRACK_SIZE","THUMB_SIZE","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","inOut","ease","delay","Rect","x","y","width","height","containsPoint","Slider","props","console","warn","state","containerSize","trackSize","thumbSize","value","Value","length","panResponder","create","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","bind","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","nextProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","toValue","start","_previousPos","getThumbPos","getCurrentValue","fireChangeEvent","e","gestureState","disabled","getValue","nativeEvent","thumbTouchRect","getThumbTouchRect","locationX","locationY","thumbHitTest","event","size","Math","max","thumbTouchSize","getTouchOverflowSize","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","layout","container","setState","prevState","orientation","track","thumb","thumbPos","dy","dx","ratio","step","minimumValue","min","maximumValue","round","__getValue","getRatio","touchOverflowSize","positionStyle","left","top","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","style","trackStyle","thumbStyle","onSlidingStart","onSlidingComplete","other","process","env","NODE_ENV","onValueChange","mainStyles","styles","interpolate","inputRange","outputRange","valueVisibleStyle","minimumTrackStyle","position","add","thumbStyleTransform","transform","thumbTransform","translateX","translateY","getTouchOverflowStyle","maximumTrackStyle","measureContainer","measureTrack","measureThumb","touchArea","panHandlers","renderDebugThumbTouchRect","propTypes","number","bool","string","shape","func","oneOf","object","defaultProps","flex","borderRadius","right","bottom","debugThumbTouchArea"],"mappings":"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","file":"Slider.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { View, StyleSheet, Animated, Easing, PanResponder } from 'react-native';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\n// import shallowCompare from 'react-addons-shallow-compare';\n// import styleEqual from 'style-equal'\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n\nclass Rect {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  containsPoint = function(x, y) {\n    return (\n      x >= this.x &&\n      y >= this.y &&\n      x <= this.x + this.width &&\n      y <= this.y + this.height\n    );\n  };\n}\n\nexport default class Slider extends Component {\n  constructor(props) {\n    super(props);\n    console.warn('rne');\n    this.state = {\n      containerSize: { width: 0, height: 0 },\n      trackSize: { width: 0, height: 0 },\n      thumbSize: { width: 0, height: 0 },\n      value: new Animated.Value(props.value),\n      length: 0,\n    };\n  }\n\n  componentWillMount() {\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(\n        this\n      ),\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(\n        this\n      ),\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(\n        this\n      ),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    var newValue = nextProps.value;\n\n    if (this.props.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      } else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   // We don't want to re-render in the following cases:\n  //   // - when only the 'value' prop changes as it's already handled with the Animated.Value\n  //   // - when the event handlers change (rendering doesn't depend on them)\n  //   // - when the style props haven't actually change\n  //\n  //   return shallowCompare(\n  //     { props: this._getPropsForComponentUpdate(this.props), state: this.state },\n  //     this._getPropsForComponentUpdate(nextProps),\n  //     nextState\n  //   ) || !styleEqual(this.props.style, nextProps.style)\n  //     || !styleEqual(this.props.trackStyle, nextProps.trackStyle)\n  //     || !styleEqual(this.props.thumbStyle, nextProps.thumbStyle);\n  // }\n  //\n  // _getPropsForComponentUpdate(props) {\n  //   var {\n  //     value,\n  //     onValueChange,\n  //     onSlidingStart,\n  //     onSlidingComplete,\n  //     style,\n  //     trackStyle,\n  //     thumbStyle,\n  //     ...otherProps,\n  //   } = props;\n  //\n  //   return otherProps;\n  // }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    var animationType = this.props.animationType;\n    var animationConfig = Object.assign(\n      {},\n      DEFAULT_ANIMATION_CONFIGS[animationType],\n      this.props.animationConfig,\n      {\n        toValue: value,\n      }\n    );\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  handleMoveShouldSetPanResponder(/*e: Object, gestureState: Object*/) {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  }\n\n  handlePanResponderGrant(/*e: Object, gestureState: Object*/) {\n    this._previousPos = this.getThumbPos(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(e, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  handlePanResponderEnd(e, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  thumbHitTest(e) {\n    var nativeEvent = e.nativeEvent;\n    var thumbTouchRect = this.getThumbTouchRect();\n    return thumbTouchRect.containsPoint(\n      nativeEvent.locationX,\n      nativeEvent.locationY\n    );\n  }\n\n  handleStartShouldSetPanResponder(e /*gestureState: Object*/) {\n    // Should we become active when the user presses down on the thumb?\n    return this.thumbHitTest(e);\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  getTouchOverflowSize() {\n    var size = {};\n    size.width = Math.max(\n      0,\n      this.props.thumbTouchSize.width - this.state.thumbSize.width\n    );\n    size.height = Math.max(\n      0,\n      this.props.thumbTouchSize.height - this.state.containerSize.height\n    );\n    return size;\n  }\n\n  getTouchOverflowStyle() {\n    var { width, height } = this.getTouchOverflowSize();\n\n    var touchOverflowStyle = {};\n    if (width !== undefined && height !== undefined) {\n      var verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      var horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  }\n\n  measureContainer(e) {\n    const { width, height } = e.nativeEvent.layout;\n    const size = { width, height };\n    console.warn({ container: size });\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        containerSize: size,\n        length:\n          this.props.orientation === 'vertical'\n            ? size.height - prevState.thumbSize.height\n            : size.width - prevState.thumbSize.width,\n      };\n    });\n  }\n\n  measureTrack(e) {\n    const { width, height } = e.nativeEvent.layout;\n    const size = { width, height };\n    console.warn({ track: size });\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        trackSize: size,\n      };\n    });\n  }\n\n  measureThumb(e) {\n    const { width, height } = e.nativeEvent.layout;\n    const size = { width, height };\n    console.warn({ thumb: size });\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        thumbSize: size,\n        length:\n          this.props.orientation === 'vertical'\n            ? size.height - prevState.thumbSize.height\n            : size.width - prevState.thumbSize.width,\n      };\n    });\n  }\n\n  getValue(gestureState) {\n    var thumbPos =\n      this._previousPos +\n      (this.props.orientation === 'vertical'\n        ? -1 * gestureState.dy\n        : gestureState.dx);\n\n    var ratio = thumbPos / this.state.length;\n\n    if (this.props.step) {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          this.props.minimumValue +\n            Math.round(\n              ratio *\n                (this.props.maximumValue - this.props.minimumValue) /\n                this.props.step\n            ) *\n              this.props.step\n        )\n      );\n    } else {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          ratio * (this.props.maximumValue - this.props.minimumValue) +\n            this.props.minimumValue\n        )\n      );\n    }\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (\n      (value - this.props.minimumValue) /\n      (this.props.maximumValue - this.props.minimumValue)\n    );\n  }\n\n  getThumbPos(value) {\n    var ratio = this.getRatio(value);\n    return ratio * this.state.length;\n  }\n\n  getThumbTouchRect() {\n    var state = this.state;\n    var props = this.props;\n    var touchOverflowSize = this.getTouchOverflowSize();\n\n    return new Rect(\n      touchOverflowSize.width / 2 +\n        this.getThumbPos(this.getCurrentValue()) +\n        (state.thumbSize.width - props.thumbTouchSize.width) / 2,\n      touchOverflowSize.height / 2 +\n        (state.containerSize.height - props.thumbTouchSize.height) / 2,\n      props.thumbTouchSize.width,\n      props.thumbTouchSize.height\n    );\n  }\n\n  renderDebugThumbTouchRect(thumbPos) {\n    var thumbTouchRect = this.getThumbTouchRect();\n    var positionStyle = {\n      left: thumbTouchRect.x,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height,\n    };\n    return <Animated.View style={positionStyle} pointerEvents=\"none\" />;\n  }\n\n  render() {\n    const {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      debugTouchArea,\n      thumbTouchSize,\n      onSlidingStart,\n      onSlidingComplete,\n      animationType,\n      animateTransitions,\n      animationConfig,\n      orientation,\n      ...other\n    } = this.props;\n\n    if (process.env.NODE_ENV !== 'test') {\n      delete other.onValueChange;\n    }\n\n    var { value, containerSize, trackSize, thumbSize, length } = this.state;\n\n    var mainStyles = containerStyle || styles;\n    var thumbPos = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: orientation === 'vertical' ? [length, 0] : [0, length],\n      //extrapolate: 'clamp',\n    });\n\n    var valueVisibleStyle = {};\n\n    var minimumTrackStyle = {\n      position: 'absolute',\n      width:\n        orientation === 'vertical'\n          ? TRACK_SIZE\n          : Animated.add(thumbPos, thumbSize.width / 2),\n      height:\n        orientation === 'vertical'\n          ? Animated.add(thumbPos, thumbSize.height / 2)\n          : TRACK_SIZE,\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle,\n    };\n\n    const thumbStyleTransform = (thumbStyle && thumbStyle.transform) || [];\n    const thumbTransform =\n      orientation === 'vertical'\n        ? [\n            {\n              translateX: (trackSize.width - thumbSize.width) / 2,\n            },\n            { translateY: thumbPos },\n          ]\n        : [\n            { translateX: thumbPos },\n            {\n              translateY: (trackSize.height - thumbSize.height) / 2,\n            },\n          ];\n    var touchOverflowStyle = this.getTouchOverflowStyle();\n\n    const maximumTrackStyle =\n      orientation === 'vertical'\n        ? { width: TRACK_SIZE, height: '100%' }\n        : { width: '100%', height: TRACK_SIZE };\n    return (\n      <View\n        {...other}\n        style={[mainStyles.container, style]}\n        onLayout={e => {\n          this.measureContainer(e);\n        }}\n      >\n        <View\n          style={[\n            { backgroundColor: maximumTrackTintColor },\n            mainStyles.track,\n            maximumTrackStyle,\n            trackStyle,\n          ]}\n          onLayout={e => {\n            this.measureTrack(e);\n          }}\n        />\n        <Animated.View\n          style={[mainStyles.track, trackStyle, minimumTrackStyle]}\n        />\n        <Animated.View\n          onLayout={e => {\n            this.measureThumb(e);\n          }}\n          style={[\n            { backgroundColor: thumbTintColor },\n            mainStyles.thumb,\n            thumbStyle,\n            {\n              transform: thumbTransform,\n            },\n          ]}\n        />\n        <View\n          style={[styles.touchArea, touchOverflowStyle]}\n          {...this.panResponder.panHandlers}\n        >\n          {debugTouchArea === true && this.renderDebugThumbTouchRect(thumbPos)}\n        </View>\n      </View>\n    );\n  }\n}\n\nSlider.propTypes = {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: PropTypes.number,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: PropTypes.number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: PropTypes.number,\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: PropTypes.string,\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n  }),\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart: PropTypes.func,\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete: PropTypes.func,\n\n  /**\n   * The style applied to the slider container.\n   */\n  style: ViewPropTypes.style,\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle: ViewPropTypes.style,\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle: ViewPropTypes.style,\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: PropTypes.bool,\n\n  /**\n  * Set to true to animate values with default 'timing' animation type\n  */\n  animateTransitions: PropTypes.bool,\n\n  /**\n  * Custom Animation type. 'spring' or 'timing'.\n  */\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n\n  /**\n  * Choose the orientation. 'horizontal' or 'vertical'.\n  */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n  * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n  */\n  animationConfig: PropTypes.object,\n  containerStyle: ViewPropTypes.style,\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: { width: 40, height: 40 },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  },\n});\n"]}