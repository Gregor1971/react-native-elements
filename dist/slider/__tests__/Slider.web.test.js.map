{"version":3,"sources":["../../../src/slider/__tests__/Slider.web.test.js"],"names":["getJsxStringToChangeSliderValue","refId","execFunc","Function","buttonTitle","props","component","enzyme","tests","styleguidist","value","minimumValue","maximumValue","step","minimumTrackTintColor","maximumTrackTintColor","thumbTouchSize","width","height","debugTouchArea","onValueChange","console","log","onSlidingStart","onSlidingComplete","style","borderWidth","trackStyle","thumbStyle","animateTransitions","script","getJsxString","animationType","animationConfig","friction","tension","samples","Input","sectionComponents","Slider","describe","it","expect","length","toBe","toMatchSnapshot","customFunction","jest","fn","simulate","toHaveBeenCalledTimes"],"mappings":"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","file":"Slider.web.test.js","sourcesContent":["import React from 'react';\r\nimport { Text, TouchableHighlight, View } from 'react-native';\r\nimport { shallow } from 'enzyme';\r\nimport toJson from 'enzyme-to-json';\r\nimport parseSamples, {\r\n  assignRef,\r\n  genRefId,\r\n} from 'enzyme-styleguidist-sample-parser';\r\nimport options, {\r\n  snapShot,\r\n  buildJsxForGuideMethod,\r\n  ensureCalled,\r\n  onlyEnsureCalled,\r\n  onlySnapshots,\r\n} from '../../../samples';\r\nimport Slider from '../Slider';\r\n\r\nconst getJsxStringToChangeSliderValue = attr => {\r\n  const refId = genRefId();\r\n  const execFunc = Function(`setState({value: 0.98});`);\r\n  const buttonTitle = 'change state.value';\r\n\r\n  return `<View>\r\n      <TouchableHighlight\r\n        onPress={() => { setState({value: 0.98})}}\r\n        style={{ backgroundColor: '#aaa', padding: 10, marginBottom: 15 }}\r\n      >\r\n        <Text>change state.value</Text>\r\n      </TouchableHighlight>\r\n      {React.createElement(Slider, {\r\n        animateTransitions: true,\r\n        animationType: 'spring',\r\n        animationConfig: {\r\n          friction: 10,\r\n          tension: 11,\r\n        },\r\n        ref:(ref) => {${refId} = ref},\r\n        value:state.value\r\n      })}\r\n    </View>`;\r\n};\r\n\r\nconst props = {\r\n  'no props': {\r\n    component: Slider,\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  value: {\r\n    component: Slider,\r\n    props: { value: 0.7 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  minimumValue: {\r\n    component: Slider,\r\n    props: { value: 0.7, minimumValue: 0.2 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  maximumValue: {\r\n    component: Slider,\r\n    props: { maximumValue: 0.7 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  step: {\r\n    component: Slider,\r\n    props: { step: 0.25 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  minimumTrackTintColor: {\r\n    component: Slider,\r\n    props: { minimumTrackTintColor: '#071' },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  maximumTrackTintColor: {\r\n    component: Slider,\r\n    props: { maximumTrackTintColor: '#071' },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  thumbTouchSize: {\r\n    component: Slider,\r\n    props: {\r\n      thumbTouchSize: { width: 100, height: 100 },\r\n      debugTouchArea: true,\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  onValueChange: {\r\n    component: Slider,\r\n    props: {\r\n      onValueChange: value => {\r\n        console.log(value);\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  onSlidingStart: {\r\n    component: Slider,\r\n    props: {\r\n      onSlidingStart: () => {\r\n        console.log('slidingStarted');\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  onSlidingComplete: {\r\n    component: Slider,\r\n    props: {\r\n      onSlidingComplete: value => {\r\n        console.log('slidingComplete: ' + value);\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  style: {\r\n    component: Slider,\r\n    props: { style: { borderWidth: 5 } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  trackStyle: {\r\n    component: Slider,\r\n    props: { trackStyle: { borderWidth: 5 } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  thumbStyle: {\r\n    component: Slider,\r\n    props: { thumbStyle: { width: 100, height: 100 } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  debugTouchArea: {\r\n    component: Slider,\r\n    props: { debugTouchArea: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  animateTransitions: {\r\n    component: Slider,\r\n    props: { animateTransitions: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {\r\n      script: `const View = RN.View;\\nconst TouchableHighlight = RN.TouchableHighlight;\\nconst Text = RN.Text;\\ninitialState = { value: 0.1 };\\n\\n`,\r\n      getJsxString: attr => {\r\n        const refId = genRefId();\r\n        const execFunc = Function(`setState({value: 0.98});`);\r\n        const buttonTitle = 'change state.value';\r\n\r\n        return `<View>\r\n            <TouchableHighlight\r\n              onPress={() => { setState({value: 0.98})}}\r\n              style={{ backgroundColor: '#aaa', padding: 10, marginBottom: 15 }}\r\n            >\r\n              <Text>change state.value</Text>\r\n            </TouchableHighlight>\r\n            {React.createElement(Slider, {\r\n              animateTransitions: true,\r\n              ref:(ref) => {${refId} = ref},\r\n              value:state.value\r\n            })}\r\n          </View>`;\r\n      },\r\n    },\r\n  },\r\n  animationType: {\r\n    component: Slider,\r\n    props: { animateTransitions: true, animationType: 'spring' },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {\r\n      script: `const View = RN.View;\\nconst TouchableHighlight = RN.TouchableHighlight;\\nconst Text = RN.Text;\\ninitialState = { value: 0.1 };\\n\\n`,\r\n      getJsxString: attr => {\r\n        const refId = genRefId();\r\n        const execFunc = Function(`setState({value: 0.98});`);\r\n        const buttonTitle = 'change state.value';\r\n\r\n        return `<View>\r\n            <TouchableHighlight\r\n              onPress={() => { setState({value: 0.98})}}\r\n              style={{ backgroundColor: '#aaa', padding: 10, marginBottom: 15 }}\r\n            >\r\n              <Text>change state.value</Text>\r\n            </TouchableHighlight>\r\n            {React.createElement(Slider, {\r\n              animateTransitions: true,\r\n              animationType: 'spring',\r\n              animationConfig: {\r\n                friction: 10,\r\n                tension: 11,\r\n              },\r\n              ref:(ref) => {${refId} = ref},\r\n              value:state.value\r\n            })}\r\n          </View>`;\r\n      },\r\n    },\r\n  },\r\n  animationConfig: {\r\n    component: Slider,\r\n    props: {\r\n      animateTransitions: true,\r\n      animationType: 'spring',\r\n      animationConfig: {\r\n        friction: 10,\r\n        tension: 11,\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {\r\n      script: `const View = RN.View;\\nconst TouchableHighlight = RN.TouchableHighlight;\\nconst Text = RN.Text;\\ninitialState = { value: 0.1 };\\n\\n`,\r\n      getJsxString: attr => {\r\n        const refId = genRefId();\r\n        const execFunc = Function(`setState({value: 0.98});`);\r\n        const buttonTitle = 'change state.value';\r\n\r\n        return `<View>\r\n            <TouchableHighlight\r\n              onPress={() => { setState({value: 0.98})}}\r\n              style={{ backgroundColor: '#aaa', padding: 10, marginBottom: 15 }}\r\n            >\r\n              <Text>change state.value</Text>\r\n            </TouchableHighlight>\r\n            {React.createElement(Slider, {\r\n              animateTransitions: true,\r\n              animationType: 'timing',\r\n              animationConfig: {\r\n                duration: 2000,\r\n              },\r\n              ref:(ref) => {${refId} = ref},\r\n              value:state.value\r\n            })}\r\n          </View>`;\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst samples = {\r\n  props,\r\n};\r\n\r\nparseSamples(\r\n  {\r\n    Input: { sectionComponents: { Slider: { samples } } },\r\n  },\r\n  options\r\n);\r\n\r\ndescribe('Slider component', () => {\r\n  it('should render without issues', () => {\r\n    const component = shallow(<Slider />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render with ThumbTouchRect', () => {\r\n    const component = shallow(\r\n      <Slider debugTouchArea={true} minimumValue={0} maximumValue={100} />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render vertically', () => {\r\n    const component = shallow(<Slider orientation=\"vertical\" />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should call onValueChange', () => {\r\n    const customFunction = jest.fn();\r\n    const component = shallow(\r\n      <Slider\r\n        value={20}\r\n        minimumValue={0}\r\n        maximumValue={100}\r\n        onValueChange={customFunction}\r\n        allMeasured={true}\r\n      />\r\n    );\r\n\r\n    expect(component.props().value).toBe(20);\r\n    component.simulate('ValueChange', 30);\r\n    expect(customFunction).toHaveBeenCalledTimes(1);\r\n  });\r\n});\r\n"]}