{"version":3,"sources":["../../../src/searchbar/__tests__/SearchBar-ios.js"],"names":["describe","it","component","expect","length","toBe","toMatchSnapshot","style","flex","height","onFocusMock","jest","fn","find","simulate","toBeCalled","onBlurMock","onChangeMock"],"mappings":"AAAA,4B;AACA;AACA;AACA,4C;AACA,8C;;AAEAA,SAAS,yBAAT,CAAoC,UAAM;AACxCC,GAAG,8BAAH,CAAmC,UAAM;AACvC,GAAMC,WAAY,oBAAQ,0DAAR,CAAlB;;AAEAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CALD;;AAOAL,GAAG,4BAAH,CAAiC,UAAM;AACrC,GAAMC,WAAY;AAChB;AACE,gBADF;AAEE,aAAc;AACZK,MAAO,CAAEC,KAAM,CAAR,CADK,CAFhB;;AAKE,eAAgB,CAAEC,OAAQ,EAAV,CALlB,EADgB,CAAlB;;;;AAUAN,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAbD;;AAeAL,GAAG,yCAAH,CAA8C,UAAM;AAClD,GAAMC,WAAY;AAChB,sDAAW,SAAU,qDAArB,EADgB,CAAlB;;;AAIAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAPD;;AASAL,GAAG,mCAAH,CAAwC,UAAM;AAC5C,GAAMC,WAAY;AAChB,sDAAW,WAAX,EADgB,CAAlB;;;AAIAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAPD;;AASAL,GAAG,kCAAH,CAAuC,UAAM;AAC3C,GAAMC,WAAY;AAChB,sDAAW,UAAW,KAAtB,EADgB,CAAlB;;;AAIAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAPD;;AASAL,GAAG,iDAAH,CAAsD,UAAM;AAC1D,GAAMC,WAAY;AAChB,sDAAW,kBAAkB,SAA7B,EADgB,CAAlB;;;AAIAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAPD;;AASAL,GAAG,2CAAH,CAAgD,UAAM;AACpD,GAAMS,aAAcC,KAAKC,EAAL,EAApB;AACA,GAAMV,WAAY;AAChB,sDAAW,QAASQ,WAApB,EADgB,CAAlB;;AAGAR,UAAUW,IAAV,CAAe,OAAf,EAAwBC,QAAxB,CAAiC,OAAjC;AACAX,OAAOO,WAAP,EAAoBK,UAApB;AACD,CAPD;;AASAd,GAAG,yCAAH,CAA8C,UAAM;AAClD,GAAMe,YAAaL,KAAKC,EAAL,EAAnB;AACA,GAAMV,WAAY;AAChB,sDAAW,QAASc,UAApB,EADgB,CAAlB;;AAGAd,UAAUW,IAAV,CAAe,OAAf,EAAwBC,QAAxB,CAAiC,OAAjC;AACAZ,UAAUW,IAAV,CAAe,OAAf,EAAwBC,QAAxB,CAAiC,MAAjC;AACAX,OAAOa,UAAP,EAAmBD,UAAnB;AACD,CARD;;AAUAd,GAAG,gDAAH,CAAqD,UAAM;AACzD,GAAMgB,cAAeN,KAAKC,EAAL,EAArB;AACA,GAAMV,WAAY;AAChB,sDAAW,aAAce,YAAzB,EADgB,CAAlB;;AAGAf,UAAUW,IAAV,CAAe,OAAf,EAAwBC,QAAxB,CAAiC,YAAjC,CAA+C,MAA/C;AACAX,OAAOc,YAAP,EAAqBF,UAArB;AACD,CAPD;AAQD,CAtFD","file":"SearchBar-ios.js","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport { shallow } from 'enzyme';\nimport toJson from 'enzyme-to-json';\nimport SearchBar from '../SearchBar-ios';\n\ndescribe('iOS SearchBar component', () => {\n  it('should render without issues', () => {\n    const component = shallow(<SearchBar />);\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with loading', () => {\n    const component = shallow(\n      <SearchBar\n        showLoading\n        loadingProps={{\n          style: { flex: 1 },\n        }}\n        containerStyle={{ height: 70 }}\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with a custom search icon', () => {\n    const component = shallow(\n      <SearchBar leftIcon={<View />} />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render without search icon', () => {\n    const component = shallow(\n      <SearchBar noIcon />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render without clear icon', () => {\n    const component = shallow(\n      <SearchBar clearIcon={false} />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with a custom Cancel button title', () => {\n    const component = shallow(\n      <SearchBar cancelButtonTitle=\"Annuler\" />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should call onFocus when input is focused', () => {\n    const onFocusMock = jest.fn();\n    const component = shallow(\n      <SearchBar onFocus={onFocusMock} />\n    );\n    component.find('Input').simulate('focus');\n    expect(onFocusMock).toBeCalled();\n  });\n\n  it('should call onBlur when input is blured', () => {\n    const onBlurMock = jest.fn();\n    const component = shallow(\n      <SearchBar onFocus={onBlurMock} />\n    );\n    component.find('Input').simulate('focus');\n    component.find('Input').simulate('blur');\n    expect(onBlurMock).toBeCalled();\n  });\n\n  it('should call onChangeText when input is changed', () => {\n    const onChangeMock = jest.fn();\n    const component = shallow(\n      <SearchBar onChangeText={onChangeMock} />\n    );\n    component.find('Input').simulate('changeText', 'test');\n    expect(onChangeMock).toBeCalled();\n  });\n});\n"]}