{"version":3,"sources":["../../../src/searchbar/__tests__/SearchBar-android.js"],"names":["describe","it","component","expect","length","toBe","toMatchSnapshot","style","flex","onFocusMock","jest","fn","find","simulate","toBeCalled","onBlurMock","onChangeMock"],"mappings":"AAAA,4B;AACA;AACA,4C;AACA,sD;;AAEAA,SAAS,6BAAT,CAAwC,UAAM;AAC5CC,GAAG,8BAAH,CAAmC,UAAM;AACvC,GAAMC,WAAY,oBAAQ,8DAAR,CAAlB;;AAEAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CALD;;AAOAL,GAAG,4BAAH,CAAiC,UAAM;AACrC,GAAMC,WAAY;AAChB;AACE,gBADF;AAEE,aAAc;AACZK,MAAO,CAAEC,KAAM,CAAR,CADK,CAFhB,EADgB,CAAlB;;;;;AASAL,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAZD;;AAcAL,GAAG,mCAAH,CAAwC,UAAM;AAC5C,GAAMC,WAAY;AAChB,0DAAW,WAAX,EADgB,CAAlB;;;AAIAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAPD;;AASAL,GAAG,kCAAH,CAAuC,UAAM;AAC3C,GAAMC,WAAY;AAChB,0DAAW,UAAW,KAAtB,EADgB,CAAlB;;;AAIAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAPD;;AASAL,GAAG,2CAAH,CAAgD,UAAM;AACpD,GAAMQ,aAAcC,KAAKC,EAAL,EAApB;AACA,GAAMT,WAAY;AAChB,0DAAW,QAASO,WAApB,EADgB,CAAlB;;AAGAP,UAAUU,IAAV,CAAe,OAAf,EAAwBC,QAAxB,CAAiC,OAAjC;AACAV,OAAOM,WAAP,EAAoBK,UAApB;AACD,CAPD;;AASAb,GAAG,yCAAH,CAA8C,UAAM;AAClD,GAAMc,YAAaL,KAAKC,EAAL,EAAnB;AACA,GAAMT,WAAY;AAChB,0DAAW,QAASa,UAApB,EADgB,CAAlB;;AAGAb,UAAUU,IAAV,CAAe,OAAf,EAAwBC,QAAxB,CAAiC,OAAjC;AACAX,UAAUU,IAAV,CAAe,OAAf,EAAwBC,QAAxB,CAAiC,MAAjC;AACAV,OAAOY,UAAP,EAAmBD,UAAnB;AACD,CARD;;AAUAb,GAAG,gDAAH,CAAqD,UAAM;AACzD,GAAMe,cAAeN,KAAKC,EAAL,EAArB;AACA,GAAMT,WAAY;AAChB,0DAAW,aAAcc,YAAzB,EADgB,CAAlB;;AAGAd,UAAUU,IAAV,CAAe,OAAf,EAAwBC,QAAxB,CAAiC,YAAjC,CAA+C,MAA/C;AACAV,OAAOa,YAAP,EAAqBF,UAArB;AACD,CAPD;AAQD,CAnED","file":"SearchBar-android.js","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport toJson from 'enzyme-to-json';\nimport SearchBar from '../SearchBar-android';\n\ndescribe('Android SearchBar component', () => {\n  it('should render without issues', () => {\n    const component = shallow(<SearchBar />);\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with loading', () => {\n    const component = shallow(\n      <SearchBar\n        showLoading\n        loadingProps={{\n          style: { flex: 1 },\n        }}\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render without search icon', () => {\n    const component = shallow(\n      <SearchBar noIcon />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render without clear icon', () => {\n    const component = shallow(\n      <SearchBar clearIcon={false} />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should call onFocus when input is focused', () => {\n    const onFocusMock = jest.fn();\n    const component = shallow(\n      <SearchBar onFocus={onFocusMock} />\n    );\n    component.find('Input').simulate('focus');\n    expect(onFocusMock).toBeCalled();\n  });\n\n  it('should call onBlur when input is blured', () => {\n    const onBlurMock = jest.fn();\n    const component = shallow(\n      <SearchBar onFocus={onBlurMock} />\n    );\n    component.find('Input').simulate('focus');\n    component.find('Input').simulate('blur');\n    expect(onBlurMock).toBeCalled();\n  });\n\n  it('should call onChangeText when input is changed', () => {\n    const onChangeMock = jest.fn();\n    const component = shallow(\n      <SearchBar onChangeText={onChangeMock} />\n    );\n    component.find('Input').simulate('changeText', 'test');\n    expect(onChangeMock).toBeCalled();\n  });\n});\n"]}