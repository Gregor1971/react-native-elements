{"version":3,"sources":["../../../src/list/__tests__/ListItem.js"],"names":["describe","it","component","expect","length","toBe","toMatchSnapshot","backgroundColor","name","type","color","size"],"mappings":"AAAA,4B;AACA;AACA;AACA,4C;AACA,qC;;AAEAA,SAAS,oBAAT,CAA+B,UAAM;AACnCC,GAAG,8BAAH,CAAmC,UAAM;AACvC,GAAMC,WAAY,oBAAQ,sDAAR,CAAlB;;AAEAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CALD;;AAOAL,GAAG,2BAAH,CAAgC,UAAM;AACpC,GAAMC,WAAY;AAChB;AACE,OAAO,YADT;AAEE,eAAgB,CAAEK,gBAAiB,MAAnB,CAFlB;AAGE,aAAc,CAAEA,gBAAiB,MAAnB,CAHhB,EADgB,CAAlB;;;;AAQAJ,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAXD;;AAaAL,GAAG,8BAAH,CAAmC,UAAM;AACvC,GAAMC,WAAY;AAChB;AACE,SAAU;AACRM,KAAM,MADE;AAERC,KAAM,cAFE;AAGRC,MAAO,KAHC;AAIRC,KAAM,EAJE,CADZ;;AAOE,aAAc,CAAEJ,gBAAiB,MAAnB,CAPhB,EADgB,CAAlB;;;;AAYAJ,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAfD;;AAiBAL,GAAG,wCAAH,CAA6C,UAAM;AACjD,GAAMC,WAAY;AAChB;AACE,SAAU,sEADZ;AAEE,aAAc,CAAEK,gBAAiB,MAAnB,CAFhB,EADgB,CAAlB;;;;AAOAJ,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAVD;;AAYAL,GAAG,yCAAH,CAA8C,UAAM;AAClD,GAAMC,WAAY;AAChB;AACE,UAAW,uEADb;AAEE,aAAc,CAAEK,gBAAiB,MAAnB,CAFhB,EADgB,CAAlB;;;;AAOAJ,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAVD;;AAYAL,GAAG,uCAAH,CAA4C,UAAM;AAChD,GAAMC,WAAY;AAChB;AACE,MAAM,YADR;AAEE,SAAS,YAFX;AAGE,WAAW,OAHb;AAIE,aAAc,CAAEK,gBAAiB,MAAnB,CAJhB;AAKE,WAAY,CAAEA,gBAAiB,MAAnB,CALd;AAME,cAAe,CAAEA,gBAAiB,MAAnB,CANjB;AAOE,WAAW,OAPb,EADgB,CAAlB;;;;AAYAJ,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAfD;;AAiBAL,GAAG,8BAAH,CAAmC,UAAM;AACvC,GAAMC,WAAY;AAChB,kDAAU,cAAV,CAAoB,gBAApB,CAAgC,iBAAhC,CAA6C,WAAW,OAAxD,EADgB,CAAlB;;;AAIAC,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAPD;AAQD,CAvFD","file":"ListItem.js","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport { shallow } from 'enzyme';\nimport toJson from 'enzyme-to-json';\nimport ListItem from '../ListItem';\n\ndescribe('ListItem component', () => {\n  it('should render without issues', () => {\n    const component = shallow(<ListItem />);\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with avatar', () => {\n    const component = shallow(\n      <ListItem\n        avatar=\"avatar_uri\"\n        containerStyle={{ backgroundColor: 'peru' }}\n        wrapperStyle={{ backgroundColor: 'peru' }}\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with left icon', () => {\n    const component = shallow(\n      <ListItem\n        leftIcon={{\n          name: 'wifi',\n          type: 'font-awesome',\n          color: 'red',\n          size: 20,\n        }}\n        wrapperStyle={{ backgroundColor: 'peru' }}\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with left icon component', () => {\n    const component = shallow(\n      <ListItem\n        leftIcon={<Text>I'm left icon</Text>}\n        wrapperStyle={{ backgroundColor: 'peru' }}\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with right icon component', () => {\n    const component = shallow(\n      <ListItem\n        rightIcon={<Text>I'm right icon</Text>}\n        wrapperStyle={{ backgroundColor: 'peru' }}\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with title and subtitle', () => {\n    const component = shallow(\n      <ListItem\n        title=\"title test\"\n        subtitle=\"title test\"\n        rightTitle=\"title\"\n        wrapperStyle={{ backgroundColor: 'peru' }}\n        titleStyle={{ backgroundColor: 'peru' }}\n        subtitleStyle={{ backgroundColor: 'peru' }}\n        fontFamily=\"arial\"\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with textInput', () => {\n    const component = shallow(\n      <ListItem textInput hideChevron switchButton fontFamily=\"arial\" />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n});\n"]}