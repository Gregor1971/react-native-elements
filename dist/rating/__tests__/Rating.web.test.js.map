{"version":3,"sources":["../../../src/rating/__tests__/Rating.web.test.js"],"names":["props","component","enzyme","tests","styleguidist","onFinishRating","console","log","rating","type","ratingImage","ratingColor","ratingBackgroundColor","ratingCount","imageSize","showRating","readonly","startingValue","fractions","style","backgroundColor","padding","samples","Input","sectionComponents","Rating","describe","it","expect","length","toBe","toMatchSnapshot","uri"],"mappings":"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","file":"Rating.web.test.js","sourcesContent":["import React from 'react';\r\nimport { Text, TouchableHighlight, View } from 'react-native';\r\nimport parseSamples, {\r\n  assignRef,\r\n  genRefId,\r\n} from 'enzyme-styleguidist-sample-parser';\r\nimport { shallow } from 'enzyme';\r\nimport toJson from 'enzyme-to-json';\r\nimport options, {\r\n  snapShot,\r\n  buildJsxForGuideMethod,\r\n  ensureCalled,\r\n  onlyEnsureCalled,\r\n  onlySnapshots,\r\n} from '../../../samples';\r\nimport Rating from '../Rating';\r\n\r\nconst props = {\r\n  'no props': {\r\n    component: Rating,\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  onFinishRating: {\r\n    component: Rating,\r\n    props: {\r\n      onFinishRating: rating => {\r\n        console.log(rating);\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  type: {\r\n    component: Rating,\r\n    props: { type: 'rocket' },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  'ratingColor, ratingImage, & ratingBackgroundColor': {\r\n    component: Rating,\r\n    props: {\r\n      type: 'custom',\r\n      ratingImage: 'water.png',\r\n      ratingColor: 'blue',\r\n      ratingBackgroundColor: '#aaa',\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  ratingCount: {\r\n    component: Rating,\r\n    props: { ratingCount: 3 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  imageSize: {\r\n    component: Rating,\r\n    props: { imageSize: 100 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  showRating: {\r\n    component: Rating,\r\n    props: { showRating: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  readonly: {\r\n    component: Rating,\r\n    props: { readonly: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  startingValue: {\r\n    component: Rating,\r\n    props: { startingValue: 3.3 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  fractions: {\r\n    component: Rating,\r\n    props: { fractions: 2 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  style: {\r\n    component: Rating,\r\n    props: { style: { backgroundColor: 'red', padding: 5 } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n};\r\n\r\nconst samples = {\r\n  props,\r\n};\r\n\r\nparseSamples(\r\n  {\r\n    Input: { sectionComponents: { Rating: { samples } } },\r\n  },\r\n  options\r\n);\r\n\r\ndescribe('Rating Component', () => {\r\n  it('should render without issues', () => {\r\n    const component = shallow(<Rating />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render rating label', () => {\r\n    const component = shallow(<Rating showRating />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render custom images', () => {\r\n    const component = shallow(\r\n      <Rating\r\n        type=\"custom\"\r\n        ratingImage={{\r\n          uri: 'https://image.freepik.com/free-icon/smiley_318-121680.jpg',\r\n        }}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render custom color', () => {\r\n    const component = shallow(\r\n      <Rating\r\n        type=\"custom\"\r\n        ratingImage={{\r\n          uri: 'https://image.freepik.com/free-icon/smiley_318-121680.jpg',\r\n        }}\r\n        ratingColor=\"green\"\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render custom background color', () => {\r\n    const component = shallow(\r\n      <Rating\r\n        type=\"custom\"\r\n        ratingImage={{\r\n          uri: 'https://image.freepik.com/free-icon/smiley_318-121680.jpg',\r\n        }}\r\n        ratingColor=\"green\"\r\n        ratingBackgroundColor=\"darkgreen\"\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render 10 images', () => {\r\n    const component = shallow(<Rating ratingCount={10} />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render images with the size of 30', () => {\r\n    const component = shallow(<Rating imageSize={30} />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render in readonly mode', () => {\r\n    const component = shallow(<Rating readonly />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render with an initial value of 3.3', () => {\r\n    const component = shallow(<Rating showRating startingValue={3.3} />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render value with 2 decimal places', () => {\r\n    const component = shallow(<Rating showRating fractions={2} />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n});\r\n"]}