{"version":3,"sources":["../../../src/form/__tests__/FormInput.web.test.js"],"names":["noProps","component","enzyme","tests","shallow","snapshot","oneTextInput","wrapper","title","test","expect","find","length","toBe","mount","render","containerStyle","props","backgroundColor","styleguidist","inputStyle","color","textInputRef","buildJsx","refId","containerRef","shake","changeShake","setProps","shakeMeth","defaultValue","script","focus","cd","blur","clearText","methods","samples","Forms","sectionComponents","FormInput","describe","it","toMatchSnapshot","customFunction","jest","fn","simulate","toHaveBeenCalled","toHaveBeenCalledTimes"],"mappings":"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","file":"FormInput.web.test.js","sourcesContent":["import React from 'react';\r\nimport { Text, TouchableHighlight, View } from 'react-native';\r\nimport { shallow } from 'enzyme';\r\nimport toJson from 'enzyme-to-json';\r\nimport parseSamples, {\r\n  assignRef,\r\n  genRefId,\r\n} from 'enzyme-styleguidist-sample-parser';\r\nimport options, {\r\n  snapShot,\r\n  buildJsxForGuideMethod,\r\n  ensureCalled,\r\n  onlyEnsureCalled,\r\n  onlySnapshots,\r\n} from '../../../samples';\r\nimport FormInput from '../FormInput';\r\n\r\n// props\r\nconst noProps = {\r\n  component: FormInput,\r\n  enzyme: {\r\n    tests: {\r\n      shallow: {\r\n        snapshot: snapShot(),\r\n        oneTextInput: (wrapper, title) => {\r\n          test(title, () => {\r\n            expect(wrapper.find('TextInput').length).toBe(1);\r\n          });\r\n        },\r\n      },\r\n      mount: { snapshot: snapShot() },\r\n      render: { snapshot: snapShot() },\r\n    },\r\n  },\r\n};\r\nconst containerStyle = {\r\n  component: FormInput,\r\n  props: { containerStyle: { backgroundColor: '#071' } },\r\n  styleguidist: {},\r\n  enzyme: {\r\n    tests: {\r\n      shallow: { snapshot: snapShot() },\r\n      mount: { snapshot: snapShot() },\r\n      render: { snapshot: snapShot() },\r\n    },\r\n  },\r\n};\r\nconst inputStyle = {\r\n  component: FormInput,\r\n  props: { inputStyle: { color: '#071' } },\r\n  styleguidist: {},\r\n  enzyme: {\r\n    tests: {\r\n      shallow: { snapshot: snapShot() },\r\n      mount: { snapshot: snapShot() },\r\n      render: { snapshot: snapShot() },\r\n    },\r\n  },\r\n};\r\nconst textInputRef = {\r\n  component: FormInput,\r\n  // props: { textInputRef: assignRef(genRefId()) },\r\n  styleguidist: {\r\n    buildJsx: () => {\r\n      const refId = genRefId();\r\n      return <FormInput textInputRef={assignRef(refId)} />;\r\n    },\r\n  },\r\n  enzyme: {\r\n    buildJsx: () => {\r\n      const refId = genRefId();\r\n      return <FormInput textInputRef={assignRef(refId)} />;\r\n    },\r\n    tests: {\r\n      shallow: { snapshot: snapShot() },\r\n    },\r\n  },\r\n};\r\nconst containerRef = {\r\n  component: FormInput,\r\n  props: { containerRef: assignRef(genRefId()) },\r\n  styleguidist: {},\r\n  enzyme: {\r\n    tests: {\r\n      shallow: { snapshot: snapShot() },\r\n    },\r\n  },\r\n};\r\nconst shake = {\r\n  component: FormInput,\r\n  props: { shake: true },\r\n  styleguidist: {},\r\n  enzyme: {\r\n    tests: {\r\n      shallow: {\r\n        snapshot: snapShot(),\r\n        changeShake: (wrapper, title) => {\r\n          wrapper.setProps({ shake: false });\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst props = {\r\n  'no props': noProps,\r\n  containerStyle,\r\n  inputStyle,\r\n  textInputRef,\r\n  containerRef,\r\n  shake,\r\n};\r\n\r\n// methods\r\n\r\nconst shakeMeth = {\r\n  component: FormInput,\r\n  props: { defaultValue: 'text to shake' },\r\n  styleguidist: {\r\n    script: `const View = RN.View;\\nconst TouchableHighlight = RN.TouchableHighlight;\\nconst Text = RN.Text;\\n`,\r\n    buildJsx: buildJsxForGuideMethod,\r\n  },\r\n  enzyme: onlyEnsureCalled,\r\n};\r\nconst focus = {\r\n  component: FormInput,\r\n  props: { defaultValue: 'cursor will appear' },\r\n  styleguidist: {\r\n    script: `const View = RN.View;\\nconst TouchableHighlight = RN.TouchableHighlight;\\nconst Text = RN.Text;\\n`,\r\n    cd: 1000,\r\n    buildJsx: buildJsxForGuideMethod,\r\n  },\r\n  enzyme: {\r\n    tests: {\r\n      shallow: {\r\n        'ensure called': ensureCalled(),\r\n      },\r\n    },\r\n  },\r\n};\r\nconst blur = {\r\n  component: FormInput,\r\n  props: { defaultValue: 'place cursor here and watch it be removed' },\r\n  styleguidist: {\r\n    script: `const View = RN.View;\\nconst TouchableHighlight = RN.TouchableHighlight;\\nconst Text = RN.Text;\\n`,\r\n    cd: 3000,\r\n    buildJsx: buildJsxForGuideMethod,\r\n  },\r\n  enzyme: {\r\n    tests: {\r\n      shallow: {\r\n        'ensure called': ensureCalled(),\r\n      },\r\n    },\r\n  },\r\n};\r\nconst clearText = {\r\n  component: FormInput,\r\n  props: { defaultValue: 'text to clear' },\r\n  styleguidist: {\r\n    script: `const View = RN.View;\\nconst TouchableHighlight = RN.TouchableHighlight;\\nconst Text = RN.Text;\\n`,\r\n    buildJsx: buildJsxForGuideMethod,\r\n  },\r\n  enzyme: {\r\n    tests: {\r\n      shallow: {\r\n        'ensure called': ensureCalled(),\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst methods = {\r\n  shake: shakeMeth,\r\n  focus,\r\n  blur,\r\n  clearText,\r\n};\r\n\r\nconst samples = {\r\n  props,\r\n  methods,\r\n};\r\n\r\nparseSamples(\r\n  {\r\n    Forms: { sectionComponents: { FormInput: { samples } } },\r\n  },\r\n  options\r\n);\r\n\r\ndescribe('FormInput Component', () => {\r\n  it('should render without issues', () => {\r\n    const component = shallow(<FormInput />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should have a TextInput component', () => {\r\n    const component = shallow(<FormInput />);\r\n\r\n    expect(component.find('TextInput').length).toBe(1);\r\n  });\r\n\r\n  it('should call onChangeText function on adding new value', () => {\r\n    const customFunction = jest.fn();\r\n    const component = shallow(<FormInput onChangeText={customFunction} />);\r\n    component.find('TextInput').simulate('ChangeText', 'Text Change');\r\n\r\n    expect(customFunction).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call onFocus function', () => {\r\n    const customFunction = jest.fn();\r\n    const component = shallow(\r\n      <FormInput\r\n        onFocus={customFunction}\r\n        containerStyle={{ backgroundColor: 'red' }}\r\n        inputStyle={{ backgroundColor: 'red' }}\r\n      />\r\n    );\r\n    component.find('TextInput').simulate('Focus');\r\n\r\n    expect(customFunction).toHaveBeenCalledTimes(1);\r\n  });\r\n});\r\n"]}