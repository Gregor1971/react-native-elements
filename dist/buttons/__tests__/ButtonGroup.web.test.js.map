{"version":3,"sources":["../../../src/buttons/__tests__/ButtonGroup.web.test.js"],"names":["buttons","props","selectedIndex","component","enzyme","tests","styleguidist","onPress","console","log","idx","shallow","snapshot","getJsxString","containerStyle","alignSelf","buttonStyle","width","backgroundColor","selectedButtonStyle","containerBorderRadius","textStyle","selectedTextStyle","innerBorderStyle","color","underlayColor","disableSelected","samples","Buttons","sectionComponents","ButtonGroup","buttonsElement","element","describe","it","expect","length","toBe","toMatchSnapshot","jest","fn","fontSize"],"mappings":"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","file":"ButtonGroup.web.test.js","sourcesContent":["import React from 'react';\r\nimport { shallow } from 'enzyme';\r\nimport toJson from 'enzyme-to-json';\r\nimport {\r\n  Text,\r\n  TouchableHighlight,\r\n  TouchableWithoutFeedback,\r\n  View,\r\n} from 'react-native';\r\nimport parseSamples, {\r\n  assignRef,\r\n  genRefId,\r\n} from 'enzyme-styleguidist-sample-parser';\r\nimport options, {\r\n  snapShot,\r\n  buildJsxForGuideMethod,\r\n  ensureCalled,\r\n  onlyEnsureCalled,\r\n  onlySnapshots,\r\n} from '../../../samples';\r\nimport ButtonGroup from '../ButtonGroup';\r\n\r\nlet buttons = ['button one', 'button two', 'button three'];\r\n\r\nconst props = {\r\n  // noProps: {\r\n  //   component: ButtonGroup,\r\n  //   enzyme: {\r\n  //     tests: onlySnapshots,\r\n  //   },\r\n  //   styleguidist: {},\r\n  // },\r\n  selectedIndex: {\r\n    component: ButtonGroup,\r\n    props: { buttons, selectedIndex: 1 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  onPress: {\r\n    component: ButtonGroup,\r\n    props: {\r\n      buttons,\r\n      onPress: idx => {\r\n        console.log('pressed: ' + idx);\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  buttons: {\r\n    component: ButtonGroup,\r\n    props: { buttons },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  component: {\r\n    component: ButtonGroup,\r\n    props: { buttons, component: TouchableWithoutFeedback },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {\r\n      getJsxString: () => {\r\n        return `const TouchableWithoutFeedback = RN.TouchableWithoutFeedback;\r\n  <ButtonGroup buttons={['button one', 'button two', 'button three']}\r\n    component={TouchableWithoutFeedback}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n  containerStyle: {\r\n    component: ButtonGroup,\r\n    props: { buttons, containerStyle: { alignSelf: 'flex-start' } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  buttonStyle: {\r\n    component: ButtonGroup,\r\n    props: {\r\n      buttons,\r\n      buttonStyle: {\r\n        width: 150,\r\n        backgroundColor: '#aaa',\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  'buttonStyle & containerStyle': {\r\n    component: ButtonGroup,\r\n    props: {\r\n      buttons,\r\n      buttonStyle: {\r\n        width: 150,\r\n        backgroundColor: '#aaa',\r\n      },\r\n      containerStyle: { alignSelf: 'flex-start' },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  selectedButtonStyle: {\r\n    component: ButtonGroup,\r\n    props: {\r\n      buttons,\r\n      selectedButtonStyle: { backgroundColor: '#071' },\r\n      selectedIndex: 1,\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  containerBorderRadius: {\r\n    component: ButtonGroup,\r\n    props: { buttons, containerBorderRadius: 20 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  textStyle: {\r\n    component: ButtonGroup,\r\n    props: { buttons, textStyle: { backgroundColor: '#071' } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  selectedTextStyle: {\r\n    component: ButtonGroup,\r\n    props: {\r\n      buttons,\r\n      selectedTextStyle: { backgroundColor: '#071' },\r\n      selectedIndex: 1,\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  innerBorderStyle: {\r\n    component: ButtonGroup,\r\n    props: { buttons, innerBorderStyle: { width: 10, color: '#071' } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  underlayColor: {\r\n    component: ButtonGroup,\r\n    props: { buttons, underlayColor: 'yellow' },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  disableSelected: {\r\n    component: ButtonGroup,\r\n    props: { buttons, disableSelected: true, selectedIndex: 1 },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n};\r\n\r\nconst samples = {\r\n  props,\r\n};\r\n\r\nparseSamples(\r\n  {\r\n    Buttons: { sectionComponents: { ButtonGroup: { samples } } },\r\n  },\r\n  options\r\n);\r\n\r\nbuttons = ['Button 1', 'Button 2', 'Button 3'];\r\nconst buttonsElement = [{ element: 'Text' }, { element: 'View' }];\r\n\r\ndescribe('ButtonGroup ButtonGroup', () => {\r\n  it('should render without issues', () => {\r\n    const component = shallow(<ButtonGroup buttons={buttons} />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should have onPress event', () => {\r\n    const onPress = jest.fn();\r\n    const component = shallow(\r\n      <ButtonGroup\r\n        buttons={buttons}\r\n        onPress={onPress}\r\n        containerStyle={{ backgroundColor: 'yellow' }}\r\n        buttonStyle={{ backgroundColor: 'blue' }}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render selectedIndex', () => {\r\n    const component = shallow(\r\n      <ButtonGroup\r\n        buttons={buttons}\r\n        selectedIndex={1}\r\n        selectedButtonStyle={{ backgroundColor: 'red' }}\r\n        selectedTextStyle={{ fontSize: 12 }}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render with button.element', () => {\r\n    const component = shallow(\r\n      <ButtonGroup\r\n        buttons={buttonsElement}\r\n        innerBorderStyle={{ width: 300, color: 'red' }}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render lastButtonStyle', () => {\r\n    const component = shallow(\r\n      <ButtonGroup\r\n        buttons={buttons}\r\n        lastBorderStyle={{ backgroundColor: 'red' }}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n});\r\n"]}