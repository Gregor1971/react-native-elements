{"version":3,"sources":["../../../src/buttons/__tests__/Button.web.test.js"],"names":["icon","props","noProps","component","enzyme","tests","styleguidist","containerStyle","padding","backgroundColor","buttonStyle","text","onPress","console","log","shallow","snapshot","textStyle","fontSize","fontFamily","textProps","numberOfLines","loading","loadingStyle","marginRight","opacity","loadingProps","size","iconContainerStyle","borderWidth","iconRight","clear","color","samples","Buttons","sectionComponents","Button"],"mappings":"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","file":"Button.web.test.js","sourcesContent":["import React from 'react';\r\nimport { shallow } from 'enzyme';\r\nimport toJson from 'enzyme-to-json';\r\nimport {\r\n  Text,\r\n  TouchableHighlight,\r\n  TouchableWithoutFeedback,\r\n  View,\r\n} from 'react-native';\r\nimport parseSamples, {\r\n  assignRef,\r\n  genRefId,\r\n} from 'enzyme-styleguidist-sample-parser';\r\nimport options, {\r\n  snapShot,\r\n  buildJsxForGuideMethod,\r\n  ensureCalled,\r\n  onlyEnsureCalled,\r\n  onlySnapshots,\r\n} from '../../../samples';\r\nimport colors from '../../config/colors';\r\nimport Button from '../Button';\r\nimport Icon from '../../icons/Icon';\r\n\r\nconst icon = <Icon color=\"#fff\" name=\"pets\" />;\r\n\r\nconst props = {\r\n  noProps: {\r\n    component: Button,\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  containerStyle: {\r\n    component: Button,\r\n    props: { containerStyle: { padding: 20, backgroundColor: '#071' } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  buttonStyle: {\r\n    component: Button,\r\n    props: { buttonStyle: { padding: 20 } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  text: {\r\n    component: Button,\r\n    props: { text: 'text prop' },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  onPress: {\r\n    component: Button,\r\n    props: {\r\n      onPress: () => {\r\n        console.log('pressed');\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  textStyle: {\r\n    component: Button,\r\n    props: {\r\n      text: 'button text',\r\n      textStyle: { fontSize: 32, fontFamily: 'Courier New' },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  textProps: {\r\n    component: Button,\r\n    props: {\r\n      text: 'button\\\\ntext',\r\n      textProps: {\r\n        numberOfLines: 2,\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  loading: {\r\n    component: Button,\r\n    props: { text: 'button text', loading: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  loadingStyle: {\r\n    component: Button,\r\n    props: {\r\n      text: 'button text',\r\n      loadingStyle: { marginRight: 50, opacity: 0.2 },\r\n      loading: true,\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  loadingProps: {\r\n    component: Button,\r\n    props: { loading: true, loadingProps: { size: 'large' } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  icon: {\r\n    component: Button,\r\n    props: { icon },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  iconContainerStyle: {\r\n    component: Button,\r\n    props: { icon, iconContainerStyle: { borderWidth: 2 } },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  iconRight: {\r\n    component: Button,\r\n    props: { icon, iconRight: true },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  clear: {\r\n    component: Button,\r\n    props: {\r\n      text: 'button text',\r\n      textStyle: { color: '#071' },\r\n      clear: true,\r\n    },\r\n    enzyme: {\r\n      tests: onlySnapshots,\r\n    },\r\n    styleguidist: {},\r\n  },\r\n};\r\n\r\nconst samples = {\r\n  props,\r\n};\r\n\r\nparseSamples(\r\n  {\r\n    Buttons: { sectionComponents: { Button: { samples } } },\r\n  },\r\n  options\r\n);\r\n"]}