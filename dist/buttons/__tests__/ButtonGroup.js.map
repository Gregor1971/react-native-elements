{"version":3,"sources":["../../../src/buttons/__tests__/ButtonGroup.js"],"names":["buttons","buttonsElement","element","describe","it","component","expect","length","toBe","toMatchSnapshot","onPress","jest","fn","backgroundColor","fontSize","width","color"],"mappings":"AAAA,4B;AACA;AACA,4C;AACA,2C;;AAEA,GAAMA,SAAU,CAAC,UAAD,CAAa,UAAb,CAAyB,UAAzB,CAAhB;AACA,GAAMC,gBAAiB,CAAC,CAAEC,QAAS,MAAX,CAAD,CAAsB,CAAEA,QAAS,MAAX,CAAtB,CAAvB;;AAEAC,SAAS,uBAAT,CAAkC,UAAM;AACtCC,GAAG,8BAAH,CAAmC,UAAM;AACvC,GAAMC,WAAY,oBAAQ,qDAAa,QAASL,OAAtB,EAAR,CAAlB;;AAEAM,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CALD;;AAOAL,GAAG,2BAAH,CAAgC,UAAM;AACpC,GAAMM,SAAUC,KAAKC,EAAL,EAAhB;AACA,GAAMP,WAAY;AAChB;AACE,QAASL,OADX;AAEE,QAASU,OAFX;AAGE,eAAgB,CAAEG,gBAAiB,QAAnB,CAHlB;AAIE,YAAa,CAAEA,gBAAiB,MAAnB,CAJf,EADgB,CAAlB;;;;AASAP,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAbD;;AAeAL,GAAG,6BAAH,CAAkC,UAAM;AACtC,GAAMC,WAAY;AAChB;AACE,QAASL,OADX;AAEE,cAAe,CAFjB;AAGE,oBAAqB,CAAEa,gBAAiB,KAAnB,CAHvB;AAIE,kBAAmB,CAAEC,SAAU,EAAZ,CAJrB,EADgB,CAAlB;;;;AASAR,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAZD;;AAcAL,GAAG,mCAAH,CAAwC,UAAM;AAC5C,GAAMC,WAAY;AAChB;AACE,QAASJ,cADX;AAEE,iBAAkB,CAAEc,MAAO,GAAT,CAAcC,MAAO,KAArB,CAFpB,EADgB,CAAlB;;;;AAOAV,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAVD;;AAYAL,GAAG,+BAAH,CAAoC,UAAM;AACxC,GAAMC,WAAY;AAChB;AACE,QAASL,OADX;AAEE,gBAAiB,CAAEa,gBAAiB,KAAnB,CAFnB,EADgB,CAAlB;;;;AAOAP,OAAOD,UAAUE,MAAjB,EAAyBC,IAAzB,CAA8B,CAA9B;AACAF,OAAO,2BAAOD,SAAP,CAAP,EAA0BI,eAA1B;AACD,CAVD;AAWD,CA5DD","file":"ButtonGroup.js","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\nimport toJson from 'enzyme-to-json';\nimport ButtonGroup from '../ButtonGroup';\n\nconst buttons = ['Button 1', 'Button 2', 'Button 3'];\nconst buttonsElement = [{ element: 'Text' }, { element: 'View' }];\n\ndescribe('ButtonGroup Component', () => {\n  it('should render without issues', () => {\n    const component = shallow(<ButtonGroup buttons={buttons} />);\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should have onPress event', () => {\n    const onPress = jest.fn();\n    const component = shallow(\n      <ButtonGroup\n        buttons={buttons}\n        onPress={onPress}\n        containerStyle={{ backgroundColor: 'yellow' }}\n        buttonStyle={{ backgroundColor: 'blue' }}\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render selectedIndex', () => {\n    const component = shallow(\n      <ButtonGroup\n        buttons={buttons}\n        selectedIndex={1}\n        selectedButtonStyle={{ backgroundColor: 'red' }}\n        selectedTextStyle={{ fontSize: 12 }}\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render with button.element', () => {\n    const component = shallow(\n      <ButtonGroup\n        buttons={buttonsElement}\n        innerBorderStyle={{ width: 300, color: 'red' }}\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n\n  it('should render lastButtonStyle', () => {\n    const component = shallow(\n      <ButtonGroup\n        buttons={buttons}\n        lastBorderStyle={{ backgroundColor: 'red' }}\n      />\n    );\n\n    expect(component.length).toBe(1);\n    expect(toJson(component)).toMatchSnapshot();\n  });\n});\n"]}