{"version":3,"sources":["../../src/buttons/ButtonGroup.js"],"names":["ButtonGroup","component","props","buttons","onPress","selectedIndex","selectedIndexes","selectMultiple","containerStyle","innerBorderStyle","lastBorderStyle","buttonStyle","textStyle","selectedTextStyle","selectedButtonStyle","underlayColor","activeOpacity","onHideUnderlay","onShowUnderlay","setOpacityTo","containerBorderRadius","disableSelected","attributes","opacityProps","highlightProps","Component","primary","styles","container","map","button","i","isSelected","includes","filter","index","length","borderRightWidth","width","borderRightColor","color","grey4","borderLeftWidth","borderLeftColor","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","backgroundColor","textContainer","element","buttonText","create","flex","justifyContent","alignItems","marginLeft","marginRight","marginBottom","marginTop","borderColor","borderWidth","flexDirection","borderRadius","overflow","height","fontSize","grey2","select","ios","fontWeight","propTypes","object","any","func","array","style","string","number","arrayOf","shape","oneOfType","bool","defaultProps"],"mappings":"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","file":"ButtonGroup.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  View,\n  Text as NativeText,\n  StyleSheet,\n  TouchableHighlight,\n  Platform,\n  TouchableOpacity,\n} from 'react-native';\nimport colors from '../config/colors';\nimport Text from '../text/Text';\nimport normalize from '../helpers/normalizeText';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\nconst ButtonGroup = props => {\n  const {\n    component,\n    buttons,\n    onPress,\n    selectedIndex,\n    selectedIndexes,\n    selectMultiple,\n    containerStyle,\n    innerBorderStyle,\n    lastBorderStyle,\n    buttonStyle,\n    textStyle,\n    selectedTextStyle,\n    selectedButtonStyle,\n    underlayColor,\n    activeOpacity,\n    onHideUnderlay,\n    onShowUnderlay,\n    setOpacityTo,\n    containerBorderRadius,\n    disableSelected,\n    ...attributes\n  } = props;\n\n  let opacityProps = {};\n  let highlightProps = {};\n  const Component = component || TouchableHighlight;\n  if (Component === TouchableOpacity) {\n    opacityProps = { activeOpacity, setOpacityTo };\n  } else if (Component === TouchableHighlight) {\n    highlightProps = {\n      onHideUnderlay,\n      onShowUnderlay,\n      underlayColor: underlayColor || colors.primary,\n    };\n  }\n  return (\n    <View\n      {...attributes}\n      style={[styles.container, containerStyle && containerStyle]}\n    >\n      {buttons.map((button, i) => {\n        const isSelected = selectedIndex === i || selectedIndexes.includes(i);\n\n        return (\n          <Component\n            {...opacityProps}\n            {...highlightProps}\n            disabled={disableSelected && i === selectedIndex ? true : false}\n            onPress={() => {\n              if (selectMultiple) {\n                if (selectedIndexes.includes(i)) {\n                  onPress(selectedIndexes.filter(index => index !== i));\n                } else {\n                  onPress([...selectedIndexes, i]);\n                }\n              } else {\n                onPress(i);\n              }\n            }}\n            key={i}\n            style={[\n              styles.button,\n              // FIXME: This is a workaround to the borderColor and borderRadius bug\n              // react-native ref: https://github.com/facebook/react-native/issues/8236\n              i < buttons.length - 1 && {\n                borderRightWidth:\n                  i === 0\n                    ? 0\n                    : (innerBorderStyle && innerBorderStyle.width) || 1,\n                borderRightColor:\n                  (innerBorderStyle && innerBorderStyle.color) || colors.grey4,\n              },\n              i === 1 && {\n                borderLeftWidth:\n                  (innerBorderStyle && innerBorderStyle.width) || 1,\n                borderLeftColor:\n                  (innerBorderStyle && innerBorderStyle.color) || colors.grey4,\n              },\n              i === buttons.length - 1 && {\n                ...lastBorderStyle,\n                borderTopRightRadius: containerBorderRadius,\n                borderBottomRightRadius: containerBorderRadius,\n              },\n              i === 0 && {\n                borderTopLeftRadius: containerBorderRadius,\n                borderBottomLeftRadius: containerBorderRadius,\n              },\n              isSelected && {\n                backgroundColor: colors.primary,\n              },\n            ]}\n          >\n            <View\n              style={[\n                styles.textContainer,\n                buttonStyle && buttonStyle,\n                isSelected && selectedButtonStyle && selectedButtonStyle,\n              ]}\n            >\n              {button.element ? (\n                <button.element />\n              ) : (\n                <Text\n                  style={[\n                    styles.buttonText,\n                    textStyle && textStyle,\n                    isSelected && { color: '#fff' },\n                    isSelected && selectedTextStyle,\n                  ]}\n                >\n                  {button}\n                </Text>\n              )}\n            </View>\n          </Component>\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n  },\n  textContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  container: {\n    marginLeft: 10,\n    marginRight: 10,\n    marginBottom: 5,\n    marginTop: 5,\n    borderColor: '#e3e3e3',\n    borderWidth: 1,\n    flexDirection: 'row',\n    borderRadius: 3,\n    overflow: 'hidden',\n    backgroundColor: '#fff',\n    height: 40,\n  },\n  buttonText: {\n    fontSize: normalize(13),\n    color: colors.grey2,\n    ...Platform.select({\n      ios: {\n        fontWeight: '500',\n      },\n    }),\n  },\n});\n\nButtonGroup.propTypes = {\n  button: PropTypes.object,\n  component: PropTypes.any,\n  onPress: PropTypes.func,\n  buttons: PropTypes.array,\n  containerStyle: ViewPropTypes.style,\n  textStyle: NativeText.propTypes.style,\n  selectedTextStyle: NativeText.propTypes.style,\n  selectedButtonStyle: ViewPropTypes.style,\n  underlayColor: PropTypes.string,\n  selectedIndex: PropTypes.number,\n  selectedIndexes: PropTypes.arrayOf(PropTypes.number),\n  activeOpacity: PropTypes.number,\n  onHideUnderlay: PropTypes.func,\n  onShowUnderlay: PropTypes.func,\n  setOpacityTo: PropTypes.any,\n  innerBorderStyle: PropTypes.shape({\n    color: PropTypes.string,\n    width: PropTypes.number,\n  }),\n  lastBorderStyle: PropTypes.oneOfType([\n    ViewPropTypes.style,\n    NativeText.propTypes.style,\n  ]),\n  buttonStyle: ViewPropTypes.style,\n  containerBorderRadius: PropTypes.number,\n  disableSelected: PropTypes.bool,\n  selectMultiple: PropTypes.bool,\n};\n\nButtonGroup.defaultProps = {\n  selectedIndexes: [],\n  selectMultiple: false,\n  containerBorderRadius: 3,\n  onPress: () => {},\n};\n\nexport default ButtonGroup;\n"]}