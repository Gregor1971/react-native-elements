{"version":3,"sources":["../../../src/icons/__tests__/Icon.web.test.js"],"names":["props","noProps","component","enzyme","tests","shallow","snapshot","styleguidist","name","type","size","color","iconStyle","transform","rotateZ","getJsxString","onPress","console","log","onLongPress","underlayColor","reverse","raised","containerStyle","padding","reverseColor","samples","Icons","sectionComponents","Icon","describe","it","expect","length","toBe","toMatchSnapshot","backgroundColor","jest","fn","simulate","toHaveBeenCalledTimes"],"mappings":"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","file":"Icon.web.test.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Text,\r\n  TouchableHighlight,\r\n  TouchableWithoutFeedback,\r\n  View,\r\n  Platform,\r\n} from 'react-native';\r\nimport { shallow } from 'enzyme';\r\nimport toJson from 'enzyme-to-json';\r\nimport parseSamples, {\r\n  assignRef,\r\n  genRefId,\r\n} from 'enzyme-styleguidist-sample-parser';\r\nimport options, {\r\n  snapShot,\r\n  buildJsxForGuideMethod,\r\n  ensureCalled,\r\n  onlyEnsureCalled,\r\n  onlySnapshots,\r\n} from '../../../samples';\r\nimport Icon from '../Icon';\r\n\r\nconst props = {\r\n  noProps: {\r\n    component: Icon,\r\n    enzyme: {\r\n      tests: {\r\n        shallow: { snapshot: snapShot() },\r\n      },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  name: {\r\n    component: Icon,\r\n    props: { name: 'pets' },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {},\r\n  },\r\n  type: {\r\n    component: Icon,\r\n    props: { name: 'sms', type: 'octicons' },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n  size: {\r\n    component: Icon,\r\n    props: { name: 'pets', size: 50 },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n  color: {\r\n    component: Icon,\r\n    props: { name: 'pets', color: '#071' },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n  iconStyle: {\r\n    component: Icon,\r\n    props: { name: 'pets', iconStyle: { transform: [{ rotateZ: '-45deg' }] } },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n  component: {\r\n    component: Icon,\r\n    props: { name: 'pets', component: TouchableWithoutFeedback },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n    styleguidist: {\r\n      getJsxString: () => {\r\n        return `  const TouchableWithoutFeedback = RN.TouchableWithoutFeedback;\r\n  <Icon\r\n  name='pets'\r\n    component={TouchableWithoutFeedback}\r\n  />`;\r\n      },\r\n    },\r\n  },\r\n  onPress: {\r\n    component: Icon,\r\n    props: {\r\n      name: 'pets',\r\n      onPress: () => {\r\n        console.log('pressed');\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n  onLongPress: {\r\n    component: Icon,\r\n    props: {\r\n      name: 'pets',\r\n      onLongPress: () => {\r\n        console.log('pressed, long');\r\n      },\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n  underlayColor: {\r\n    component: Icon,\r\n    props: {\r\n      name: 'pets',\r\n      onPress: () => {\r\n        console.log('pressed');\r\n      },\r\n      underlayColor: 'yellow',\r\n    },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n  reverse: {\r\n    component: Icon,\r\n    props: { name: 'pets', reverse: true },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n  raised: {\r\n    component: Icon,\r\n    props: { name: 'pets', raised: true },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n  containerStyle: {\r\n    component: Icon,\r\n    props: { name: 'pets', containerStyle: { padding: 50 } },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n  reverseColor: {\r\n    component: Icon,\r\n    props: { name: 'pets', reverse: true, reverseColor: '#071' },\r\n    enzyme: {\r\n      tests: { shallow: { snapshot: snapShot() } },\r\n    },\r\n  },\r\n};\r\nconst samples = {\r\n  props,\r\n};\r\n\r\nparseSamples(\r\n  {\r\n    Icons: { sectionComponents: { Icon: { samples } } },\r\n  },\r\n  options\r\n);\r\n\r\ndescribe('Icon component', () => {\r\n  it('should render without issues', () => {\r\n    const component = shallow(<Icon name=\"wifi\" />);\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should render with icon type', () => {\r\n    const component = shallow(\r\n      <Icon\r\n        name=\"alert\"\r\n        type=\"octicon\"\r\n        reverse\r\n        color=\"red\"\r\n        iconStyle={{ backgroundColor: 'peru' }}\r\n      />\r\n    );\r\n\r\n    expect(component.length).toBe(1);\r\n    expect(toJson(component)).toMatchSnapshot();\r\n  });\r\n\r\n  it('should have onPress event', () => {\r\n    const onPress = jest.fn();\r\n    const component = shallow(<Icon onPress={onPress} name=\"wifi\" />);\r\n\r\n    component.simulate('press');\r\n    expect(onPress).toHaveBeenCalledTimes(1);\r\n  });\r\n});\r\n"]}